#pageTitle("topic","topic")
#title("Tiny框架","从应用示例来认识Tiny框架 ")
#[[<div class="BlogContent"><p>呵呵，Tiny框架神龙见首不见尾已经许多时间了，里面只看到一些几个孤零零的子框架。今天就通过Tiny开发示例的方式来重点展示一下利用Tiny框架是如何开发的。</p><span id="OSC_h1_1"></span><h1>HelloWorld</h1><p>首先从这个神一样的示例写起。</p><p>服务开发：</p><span id="OSC_h2_2"></span><h2>方式1：注解方式</h2><pre class="brush:java; toolbar: true; auto-links: false;">@ServiceComponent()
public class HelloWorldAnnotationService{
	@ServiceMethod(serviceId = &quot;sayHelloA&quot;)
	@ServiceResult(name = &quot;result&quot;)
	@ServiceViewMapping(&quot;/helloworld/helloresult.page&quot;)
	public String sayHello(String name) {
		if (name == null) {
			name = &quot;world.&quot;;
		}
		return &quot;hello,&quot; + name;
	}
}</pre><p><span style="line-height:1.5;font-size:12.5px;">解释：</span></p><p>@ServiceMethod(serviceId = &quot;sayHelloA&quot;)声明服务ID，必须不能重复，保证唯一</p><p>@ServiceResult(name = &quot;result&quot;)声明返回结果在服务调用完之后旋转在数据总线的名称</p><p>@ServiceViewMapping(&quot;/helloworld/helloresult.page&quot;)声明如果调用服务之后转向的展现页面，可省略</p><p>表单输入界面：helloworld.page</p><pre class="brush:html; toolbar: true; auto-links: false;">服务方式：
&lt;form action=&quot;sayHelloA.servicepage&quot;&gt;
 输入名称：&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;
 &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;
&lt;/form&gt;</pre><p><span style="font-size:12.5px;line-height:1.5;">运行结果界面：</span></p><p><span style="line-height:1.5;font-size:12.5px;">helloresult.page</span></p><pre class="brush:java; toolbar: true; auto-links: false;">$!result</pre><span id="OSC_h2_3"></span><h2>方式2：Xml配置方式</h2><pre class="brush:java; toolbar: true; auto-links: false;">public class HelloWorldXmlService{
	public String sayHello(String name) {
		if (name == null) {
			name = &quot;world.&quot;;
		}
		return &quot;hello,&quot; + name;
	}
}</pre><p><span style="font-size:12.5px;line-height:1.5;">上面写完类之后，还要再加一个配置文件：</span></p><pre class="brush:xml; toolbar: true; auto-links: false;">&lt;service-components&gt;
	&lt;service-component type=&quot;org.tinygroup.helloworld.service.HelloWorldXmlService&quot;
		group-id=&quot;org.tinygroup&quot; artifact-id=&quot;helloworldservice&quot;&gt;
		&lt;service-method name=&quot;sayHello&quot; local-name=&quot;sayHello&quot;
			service-id=&quot;sayHello&quot; version=&quot;&quot; description=&quot;&quot;
			method-name=&quot;sayHello&quot;&gt;
			&lt;service-parameters&gt;
				&lt;service-parameter name=&quot;name&quot; type=&quot;java.lang.String&quot;
					required=&quot;true&quot; is-array=&quot;false&quot; /&gt;
			&lt;/service-parameters&gt;
			&lt;service-result name=&quot;result&quot; required=&quot;false&quot;
				is-array=&quot;false&quot; type=&quot;java.lang.String&quot; /&gt;
		&lt;/service-method&gt;
	&lt;/service-component&gt;
&lt;/service-components&gt;</pre><p>这段Xml手工写还是有点麻烦的，不过没关系，咱有工具：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/172244_xQD4_1245989.png" alt=""></img></p><p><img src="http://static.oschina.net/uploads/space/2014/0522/172345_2GDF_1245989.png" alt=""></img></p><p>如果想在调用服务之后自动转向到一个页面，则要再配下面的xml</p><p><span></span></p><pre class="brush:xml; toolbar: true; auto-links: false;">&lt;service-view-mappings&gt;
	&lt;service-view-mapping service-id=&quot;sayHello&quot; path=&quot;/helloworld/helloresult.page&quot; type=&quot;forward&quot;&gt;&lt;/service-view-mapping&gt;
&lt;/service-view-mappings&gt;</pre><span id="OSC_h2_4"></span><h2><span></span><p>表单输入界面：helloworld.page</p><pre class="brush:xml; toolbar: true; auto-links: false;">服务方式：
&lt;form action=&quot;sayHello.servicepage&quot;&gt;
 输入名称：&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;
 &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;
&lt;/form&gt;</pre><p><span style="font-size:12.5px;line-height:1.5;">运行结果界面：</span></p><p><span style="line-height:1.5;font-size:12.5px;">helloresult.page</span></p><pre class="brush:java; toolbar: true; auto-links: false;">$!result</pre><p>方式3：流程编排方式</p></h2><p>要通过流程编排方式实现，先要写一个组件：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class HelloWorldComponent implements ComponentInterface {
	String name;
	String resultKey;
	public String getResultKey() {
		return resultKey;
	}
	public void setResultKey(String resultKey) {
		this.resultKey = resultKey;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public void execute(Context context) {
		context.put(resultKey, String.format(&quot;Hello, %s&quot;, name));
	}
}</pre>写完组件之后，还要编写组件定义文件来定义组件的定义文件，当然要做成组件，就一定要有通用性，这样就可以一次定义，到处使用，对于只用一次的，这么做就不方便了。<pre class="brush:xml; toolbar: true; auto-links: false;">&lt;components&gt;
	&lt;component name=&quot;helloworld&quot; bean=&quot;helloworld&quot;
		title=&quot;HelloWorld组件&quot; category=&quot;测试组件&quot; icon=&quot;/icon/component.gif&quot;&gt;
		&lt;short-description&gt;helloworld component&lt;/short-description&gt;
		&lt;long-description&gt;helloworld component long description
		&lt;/long-description&gt;
		&lt;parameter name=&quot;name&quot; title=&quot;名字&quot; type=&quot;java.lang.String&quot;&gt;&lt;/parameter&gt;
		&lt;parameter name=&quot;resultKey&quot; title=&quot;结果键值&quot; type=&quot;java.lang.String&quot;&gt;&lt;/parameter&gt;
	&lt;/component&gt;
&lt;/components&gt;</pre><p><span style="font-size:12.5px;line-height:1.5;">OK，现在流程组件就开发完毕了。</span></p><p><img src="http://static.oschina.net/uploads/space/2014/0522/144453_9aLV_1245989.png" alt=""></img></p><p>就可以像上面一样在可视的流程编辑器中进行可视化开发了。</p><p>表单输入页面:</p><p><span></span>/helloworld.page</p><pre class="brush:html; toolbar: true; auto-links: false;">流程方式：
&lt;form action=&quot;helloworld.pageflow&quot;&gt;
 输入名称：&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;
 &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;
&lt;/form&gt;</pre>运行结果页面：<p>helloresult.page</p><pre class="brush:java; toolbar: true; auto-links: false;">$!result</pre><p><span style="line-height:1.5;font-size:12.5px;">上面的展现简单是简单了点，但是容易理解。</span></p><p>通过上面的HelloWorld，我们对Tiny框架的服务开发及界面开发及控制层的开发都有了一定的了解，下面我们就进入更加复杂一点的示例：</p><span id="OSC_h1_5"></span><h1>四则运算</h1><p>由于前面一节已经有了一定了解，因此这一节就只贴代码，解释就省了。</p><span id="OSC_h2_6"></span><h2>通过注解方式开发服务</h2><pre class="brush:cpp; toolbar: true; auto-links: false;">@ServiceComponent()
public class FourOperateAnnotationService{
	@ServiceMethod(serviceId = &quot;additionWithAnno&quot;)
	@ServiceResult(name = &quot;result&quot;)
	@ServiceViewMapping(&quot;/fouroperate/result.page&quot;)
	public double addition(double number1,double number2){
		return number1+number2;
	}
	@ServiceMethod(serviceId = &quot;subtractWithAnno&quot;)
	@ServiceResult(name = &quot;result&quot;)
	@ServiceViewMapping(&quot;/fouroperate/result.page&quot;)
	public double subtraction(double number1,double number2){
		return number1-number2;
	}
	@ServiceMethod(serviceId = &quot;multiWithAnno&quot;)
	@ServiceResult(name = &quot;result&quot;)
	@ServiceViewMapping(&quot;/fouroperate/result.page&quot;)
	public double multi(double number1,double number2){
		return number1*number2;
	}
	@ServiceMethod(serviceId = &quot;divisionWithAnno&quot;)
	@ServiceResult(name = &quot;result&quot;)
	@ServiceViewMapping(&quot;/fouroperate/result.page&quot;)
	public double division (double number1,double number2){
		return number1/number2;
	}
}</pre><span id="OSC_h2_7"></span><h2>通过Xml配置方式开发服务</h2><pre class="brush:java; toolbar: true; auto-links: false;">public class FourOperateXmlService{
	
	public Double addition(Double number1,Double number2){
		return number1+number2;
	}
	
	public Double subtraction(Double number1,Double number2){
		return number1-number2;
	}
	
	public Double multi(Double number1,Double number2){
		return number1*number2;
	}
	
	public Double division (Double number1,Double number2){
		return number1/number2;
	}
}</pre><span id="OSC_h2_8"></span><h2>通过流程方式开发服务</h2><p>下面先搞个抽象类：</p><pre class="brush:java; toolbar: true; auto-links: false;">public  abstract class AbstractFourOperateComponent implements ComponentInterface {
	protected double number1;
	protected double number2;
	protected String resultKey;
	public String getResultKey() {
		return resultKey;
	}
	public void setResultKey(String resultKey) {
		this.resultKey = resultKey;
	}
	public double getNumber1() {
		return number1;
	}
	public void setNumber1(double number1) {
		this.number1 = number1;
	}
	public double getNumber2() {
		return number2;
	}
	public void setNumber2(double number2) {
		this.number2 = number2;
	}
}</pre>接下来就简单了：<pre class="brush:java; toolbar: true; auto-links: false;">public class AdditionComponent extends AbstractFourOperateComponent {

	public void execute(Context context) {
		context.put(resultKey, number1+number2);
	}

}</pre><pre class="brush:java; toolbar: true; auto-links: false;">public class DivisionComponent extends AbstractFourOperateComponent {

	public void execute(Context context) {
		context.put(resultKey, number1/number2);
	}

}</pre><pre class="brush:java; toolbar: true; auto-links: false;">public class MultiComponent extends AbstractFourOperateComponent {

	public void execute(Context context) {
		context.put(resultKey, number1*number2);
	}

}</pre><pre class="brush:java; toolbar: true; auto-links: false;">public class SubtractionComponent extends AbstractFourOperateComponent {

	public void execute(Context context) {
		context.put(resultKey, number1-number2);
	}

}</pre><p>然后就可以通过编辑器，可视化编辑了。</p><img src="http://static.oschina.net/uploads/space/2014/0522/150926_F5FX_1245989.png" alt=""></img><p>由于这里主要说明服务端的开发，因此客户端的开发就省略了，其实也是非常简单的。</p><span id="OSC_h1_9"></span><h1>数据库示例</h1><p>搞开发，怎么能不搞数据库呢？？</p><p>下面展现一下数据的开发：</p><span id="OSC_h2_10"></span><h2>采用Hibernate来开发数据库应用</h2><p>首先搞个Pojo</p><pre class="brush:java; toolbar: true; auto-links: false;">public class User {

	private int id;  
    private String name;
    private int age;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
}</pre>接下来配个hbm文件：<pre class="brush:xml; toolbar: true; auto-links: false;">&lt;?xml version=&quot;1.0&quot;?&gt;  
&lt;!DOCTYPE hibernate-mapping PUBLIC   
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;  
    &quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;
&lt;hibernate-mapping package=&quot;org.tinygroup.crud.pojo&quot;&gt;  
    &lt;class name=&quot;User&quot; table=&quot;user&quot; &gt;  
        &lt;id name=&quot;id&quot; &gt;  
            &lt;generator class=&quot;native&quot; /&gt;  
        &lt;/id&gt;  
        &lt;property name=&quot;name&quot; /&gt;  
        &lt;property name=&quot;age&quot; /&gt;  
    &lt;/class&gt;  
&lt;/hibernate-mapping&gt;</pre>再接下来写个Dao：<pre class="brush:java; toolbar: true; auto-links: false;">public class HibernateCrudDao extends HibernateDaoSupport implements CrudDbDao&lt;User&gt;{

	public void addUser(User user) {
          getHibernateTemplate().save(user);		
	}

	public void updateUser(User user) {
		getHibernateTemplate().update(user);
	}

	public void deleteUser(User user) {
		getHibernateTemplate().delete(user);
	}

	@SuppressWarnings(&quot;unchecked&quot;)
	public List&lt;User&gt; queryUsers(User user) {
		if(user==null){
			return getHibernateTemplate().loadAll(User.class);
		}
		return getHibernateTemplate().findByExample(user);
	}

	public User queryUserById(int id) {
		return (User) getHibernateTemplate().get(User.class, id);
	}

}</pre>接下来实现服务：<pre class="brush:java; toolbar: true; auto-links: false;">@ServiceComponent()
public class HibernateCrudService implements CrudDbService&lt;User&gt; {
	
	private CrudDbDao&lt;User&gt; crudDbDao;
	
	public CrudDbDao&lt;User&gt; getCrudDbDao() {
		return crudDbDao;
	}

	public void setCrudDbDao(CrudDbDao&lt;User&gt; crudDbDao) {
		this.crudDbDao = crudDbDao;
	}
	@ServiceMethod(serviceId = &quot;addUser&quot;)
	@ServiceViewMapping(value=&quot;/queryUsers.servicepage&quot;,type=&quot;redirect&quot;)
	public void addUser(User user) {
         crudDbDao.addUser(user);
	}
	@ServiceMethod(serviceId = &quot;updateUser&quot;)
	@ServiceViewMapping(value=&quot;/queryUsers.servicepage&quot;,type=&quot;redirect&quot;)
	public void updateUser(User user) {
         crudDbDao.updateUser(user);
	}
	@ServiceMethod(serviceId = &quot;deleteUser&quot;)
	@ServiceViewMapping(value=&quot;/queryUsers.servicepage&quot;,type=&quot;redirect&quot;)
	public void deleteUserById(int id) {
		User user=getUserById(id);
		crudDbDao.deleteUser(user);
	}
	@ServiceMethod(serviceId = &quot;queryUsers&quot;)
	@ServiceResult(name = &quot;users&quot;)
	@ServiceViewMapping(&quot;/crud/service/hibernate/list.page&quot;)
	public List&lt;User&gt; queryUsers(User user) {
		return crudDbDao.queryUsers(user);
	}
	@ServiceMethod(serviceId = &quot;queryUserById&quot;)
	@ServiceResult(name = &quot;user&quot;)
	@ServiceViewMapping(&quot;/crud/service/hibernate/operate.page&quot;)
	public User getUserById(Integer id) {
		if(id==null){
			return null;
		}
		return crudDbDao.queryUserById(id);
	}

}</pre>没错，你看起来这里的服务都是直接调用dao里的方法的，对于这个简单例子看起来有点重复，但是实际应用中是不可能直接把dao发布成服务的，因此你可以想像一下这里有好多步操作就好了。<p>至此基于Hibernate就可以开发完毕了。</p><span id="OSC_h2_11"></span><h2>采用TinyDB来实现</h2><p>TinyDB采用了No Pojo,No Dao的解决方案：</p><pre class="brush:java; toolbar: true; auto-links: false;">@ServiceComponent()
public class TinyDbCrudService extends BeanSupport implements CrudDbService&lt;Bean&gt;{
	
    private DBOperator operator;
	
	private BeanOperatorManager manager;
	
	private String beanType;
	
	public void setBeanType(String beanType) {
		this.beanType = beanType;
	}

	public void setManager(BeanOperatorManager manager) {
		this.manager = manager;
	}

	 /** 初始化bean。 */
    protected void init() throws Exception {
    	Assert.assertNotNull(manager, &quot;manager must not null&quot;);
    	operator=manager.getDbOperator(beanType);
    }
	
	
	@ServiceMethod(serviceId = &quot;addUserTiny&quot;)
	@ServiceViewMapping(value=&quot;/queryUsersTiny.servicepage?@beantype=user&quot;,type=&quot;redirect&quot;)
	public void addUser(Bean user) {
		operator.insert(user);
	}
	@ServiceMethod(serviceId = &quot;updateUserTiny&quot;)
	@ServiceViewMapping(value=&quot;/queryUsersTiny.servicepage?@beantype=user&quot;,type=&quot;redirect&quot;)
	public void updateUser(Bean user) {
		operator.update(user);
	}
	@ServiceMethod(serviceId = &quot;deleteUserTiny&quot;)
	@ServiceViewMapping(value=&quot;/queryUsersTiny.servicepage?@beantype=user&quot;,type=&quot;redirect&quot;)
	public void deleteUserById(int id) {
		operator.deleteById(id);
	}
	@ServiceMethod(serviceId = &quot;queryUsersTiny&quot;)
	@ServiceResult(name = &quot;users&quot;)
	@ServiceViewMapping(&quot;/crud/service/tinydb/list.page&quot;)
	public List&lt;Bean&gt; queryUsers(Bean user) {
		if(user==null){
			user=new Bean(beanType);
		}
		Bean[] beans= operator.getBeans(user);
		return Arrays.asList(beans);
	}
	@ServiceMethod(serviceId = &quot;queryUserByIdTiny&quot;)
	@ServiceResult(name = &quot;user&quot;)
	@ServiceViewMapping(&quot;/crud/service/tinydb/operate.page&quot;)
	public Bean getUserById(Integer id) {
		if(id==null){
			return null;
		}
		return operator.getBean(id);
	}

}</pre>OK，这样就算完成了。<p>够简单么？？NO，还不够简单。</p><p>实际上TinyDB中对于常用的CRUD，根本就不用写代码，框架默认就全部支持了，所以只有复杂的业务逻辑的都需要像上面一样写一下，简单的CRUD，就不用写了。</p><span id="OSC_h2_12"></span><h2>通过流程方式开发</h2><p>框架内嵌已经包含了常用的数据库处理组件：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/152717_8WYb_1245989.png" alt=""></img></p><p>哇，只要拖拖配配就可以了。</p><span id="OSC_h2_13"></span><h2>页面流</h2><p>页面流是Tiny框架推荐的控制层解决方案，它强大，简单，可视性好。</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/153711_cVs6_1245989.png" alt=""></img></p><p>呵呵，是不是实现简单，看起来清晰？</p><p>当然它的强大在这么简单的例子里是看不到的。</p><span id="OSC_h1_14"></span><h1>WEB工程</h1><p>从上面的示例来看，它的界面确实是简单的。然后上面的三个工程最后打了3个Jar包，就算开发完毕了。</p><p>在我们的Web工程中，我们要添加这些示例，只要修改pom文件即可：</p><pre class="brush:xml; toolbar: true; auto-links: false;">&lt;dependency&gt;
			&lt;groupId&gt;org.tinygroup&lt;/groupId&gt;
			&lt;artifactId&gt;org.tinygroup.helloworld&lt;/artifactId&gt;
			&lt;version&gt;1.2.0-SNAPSHOT&lt;/version&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.tinygroup&lt;/groupId&gt;
			&lt;artifactId&gt;org.tinygroup.fouroperate&lt;/artifactId&gt;
			&lt;version&gt;1.2.0-SNAPSHOT&lt;/version&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.tinygroup&lt;/groupId&gt;
			&lt;artifactId&gt;org.tinygroup.crud&lt;/artifactId&gt;
			&lt;version&gt;1.2.0-SNAPSHOT&lt;/version&gt;
		&lt;/dependency&gt;</pre>POM添加了，功能就添加了；POM删除了，功能就删除了，这就是Tiny框架中所说的模块化。<span id="OSC_h1_15"></span><h1>UI引擎</h1><p>示例完成之后，我对做示例的同学说，你这个示例写得还是可以的，但是我展示的时候很不方便，我要记得每个地址，这对我要求也太高了，能不能给我搞个菜单出来？？</p><p>此同学说好的，结果他创建了一个default.layout文件，加了如下的代码：</p><pre class="brush:html; toolbar: true; auto-links: false;">&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;
   &lt;tr&gt;
      &lt;td colspan=&quot;2&quot;&gt;
    helloworld示例:&lt;a href=&quot;${TINY_CONTEXT_PATH}/helloworld/helloworld.page&quot;&gt;helloworld&lt;/a&gt;&lt;br/&gt;
          四则运算示例:&lt;a href=&quot;${TINY_CONTEXT_PATH}/fouroperate/fouroperate.page&quot;&gt;四则运算&lt;/a&gt;&lt;br/&gt;
          增删改查示例:&lt;a href=&quot;${TINY_CONTEXT_PATH}/crud/crud.page&quot;&gt;增删改查&lt;/a&gt;&lt;br/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;  
      &lt;td width=&quot;20%&quot;&gt;内容展示&lt;/td&gt;
      &lt;td&gt;
         $pageContent
      &lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;</pre>然后我就在访问所有页面的时候都有菜单可用了，这就是TinyUI框架中的装饰。<span id="OSC_h1_16"></span><h1>应用截图</h1><p>首页：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163238_pRxM_1245989.png" alt=""></img></p><p>点击helloworld进入helloworld示例首页</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163352_cNzD_1245989.png" alt=""></img></p><p>再点下面的服务方式后的helloworld链接</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163509_dNmk_1245989.png" alt=""></img></p><p>输入abc之后，点提交：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163559_Wypy_1245989.png" alt=""></img></p><p>结果就出来了。</p><p>下面是数据访问页面：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163722_XWdH_1245989.png" alt=""></img></p><p>添加界面：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163825_jOrC_1245989.png" alt=""></img></p><p>四则运算界面：</p><p><img src="http://static.oschina.net/uploads/space/2014/0522/163919_C5T0_1245989.png" alt=""></img></p><p>呵呵，不要嫌界面丑，界面丑是因为我不想引入复杂的页面使得注意力转移到其它地方。</p><span id="OSC_h1_17"></span><h1>总结</h1><p>上面用了三个例子：HelloWorld,四则运算，数据库访问来对Tiny框架的开发过程进行了展示。当然，Tiny框架提供的实际内容要远远多于你上面看到的内容，比如：</p><ol><li><span style="line-height:1.5;font-size:12.5px;">对页面的局部刷新有强有力的支持，便于进行Ajax处理</span></li><li><span style="line-height:1.5;font-size:12.5px;">提供Bigpipe模式来提升用户体验</span></li><li><span style="line-height:1.5;font-size:12.5px;">提供CSS合并、提供JS合并，提供内容压缩输出到浏览器端</span></li><li>上面开发的所有服务都可以提供xml,json方式结果的返回，也可以通过webservice进行访问</li><li>提供分层部署能力</li><li>提供集群部署支持，接入服务器可以水平进行扩展，应用服务器可以进行水平扩展。</li><li>更多请看<span>Tiny框架内容组成请看：</span><a href="http://my.oschina.net/tinyframework/blog/204994" target="_blank" rel="nofollow">http://my.oschina.net/tinyframework/blog/204994</a></li></ol><p>更多内容请看本人首页：<a href="http://my.oschina.net/tinyframework" target="_blank" rel="nofollow">http://my.oschina.net/tinyframework</a></p><p><br></br></p></div>]]#