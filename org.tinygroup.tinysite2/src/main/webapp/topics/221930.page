#pageTitle("topic","topic")
#title("Tiny框架","Velocity宏定义的坑与解决办法 ")
#[[<div class="BlogContent"><p>使用Velocity，当然就免不了要使用宏，或者说<span>使用Velocity而</span>不使用其宏，就相当于废了Velocity一半以上的武功，非常可惜的。</p><p>怎么使用Velocity的宏呢，才最大程度的发挥其作用但是又避免掉入其中的坑呢？且听悠然乱弹乱弹：</p><p>官方文档中，关于Macro是这么说的：</p><table style="width:100%;background-color:#DFC5A4;" cellpadding="2" cellspacing="0" border="1" bordercolor="#E53333"><tbody><tr><td><h3>#macro - Allows users to define a Velocimacro (VM), a repeated segment of a VTL template, as required</h3><p style="font-family:&apos;Times New Roman&apos;, Times, serif;font-size:16px;background-color:#FFFFFF;">Format:</p><p style="font-family:&apos;Times New Roman&apos;, Times, serif;font-size:16px;background-color:#FFFFFF;"><strong>#</strong>&amp;nbsp;[&amp;nbsp;<strong>{</strong>&amp;nbsp;]&amp;nbsp;<strong>macro</strong>&amp;nbsp;[&amp;nbsp;<strong>}</strong>&amp;nbsp;]&amp;nbsp;<strong>(</strong>&amp;nbsp;vmname $arg1 [ $arg2 $arg3 ... $argn ]&amp;nbsp;<strong>)</strong>&amp;nbsp;[ VM VTL code... ]&amp;nbsp;<strong>#</strong>&amp;nbsp;[&amp;nbsp;<strong>{</strong>&amp;nbsp;]&amp;nbsp;<strong>#end</strong>&amp;nbsp;[&amp;nbsp;<strong>}</strong>&amp;nbsp;]</p><ul><li><em>vmname</em>&amp;nbsp;- Name used to call the VM (<em>#vmname</em>)</li><li><em>$arg1 $arg2 [ ... ]</em>&amp;nbsp;- Arguments to the VM. There can be any number of arguments, but the number used at invocation must match the number specified in the definition.</li><li><em>[ VM VTL code... ]</em>&amp;nbsp;- Any valid VTL code, anything you can put into a template, can be put into a VM.</li></ul><p style="font-family:&apos;Times New Roman&apos;, Times, serif;font-size:16px;background-color:#FFFFFF;">Once defined, the VM is used like any other VTL directive in a template.</p><div><pre>#vmname( $arg1 $arg2 )<span style="font-family:&apos;sans serif&apos;, tahoma, verdana, helvetica;line-height:1.5;"></span></pre></div></td></tr></tbody></table><br></br>当然，上面清晰的说明了怎么写Macro,<p>也就是说可以写成：</p><pre class="brush:scala; toolbar: true; auto-links: false;">#{macro}(macroName $varName1 $varName2)

##这里是模板内容

#end</pre>也可以写成<pre class="brush:cpp; toolbar: true; auto-links: false;">#macro(macroName $varName1 $varName2)

##这里是模板内容

#end</pre>当然参数个数可以是0..n个。<p>OK，确实很简单，但是上面的说法实际上只解决了如何写出满足正确语法的宏，但是实际应用当中，如果不加以约束，可能就出现非常难以查找的问题。</p><p>比如下面定义了一个超链接的宏，由于id不是每次都用得到，因此id是可选参数，可以填，也可以不填：</p><pre class="brush:html; toolbar: true; auto-links: false;">#macro(link $href $id)
&lt;a href=&quot;$!href&quot;#if($id) id=&quot;$id&quot;#end&gt;$bodyContent&lt;/a&gt;
#end</pre>然后，就可以如下使用了：<pre class="brush:html; toolbar: true; auto-links: false;">#@link(&quot;www.tinygroup.com&quot;)TinyGroup#end</pre><p>上面的写法有问题么？？似乎没有什么问题，即使什么参数也不传，只写下面的调用方法：</p><pre class="brush:html; toolbar: true; auto-links: false;">#@link()#end</pre>渲染的结果也会是：<pre class="brush:html; toolbar: true; auto-links: false;">&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</pre>OK,如此说来，真的没有啥问题。<p>接下来，我们又要写一个图片链接的宏，同样的由于id不是每次都需要，我们把它写成可选的：</p><pre class="brush:html; toolbar: true; auto-links: false;">#macro(image $href $id)
&lt;img src=&quot;$href&quot;#if($id) id=&quot;$id&quot;#end&gt;
#end</pre>在调用的时候，我们可以如下写：<pre class="brush:html; toolbar: true; auto-links: false;">#image(&quot;www.tinygroup.org/img/logo.gif&quot;)</pre>也可以这样写<pre class="brush:html; toolbar: true; auto-links: false;">#image(&quot;www.tinygroup.org/img/logo.gif&quot; &quot;logoImage&quot;)</pre>OK，一切都没有什么问题<p>但是我们想给首页上的Logo图片加个链接到首面上。</p><p>这个时候，我们会如下写：</p><pre class="brush:html; toolbar: true; auto-links: false;">#@link(&quot;www.tinygroup.org&quot;)
#image(&quot;www.tinygroup.org/img/logo.gif&quot;)
#end</pre>渲染的结果也如我们所期望的<pre class="brush:html; toolbar: true; auto-links: false;">&lt;a href=&quot;www.tinygroup.org&quot;&gt;&lt;img src=&quot;www.tinygroup.org/img/logo.gif&quot;&gt;&lt;/a&gt;</pre>确实也如我们期望，正确的渲染了。<p>这个时候，我们忽然期望首页链接添加个id，期望利用JQuery对其进行一些动态处理，我们就把代码写成下面的样子：</p><pre class="brush:html; toolbar: true; auto-links: false;">#@link(&quot;www.tinygroup.org&quot; &quot;homepageLink&quot;)
#image(&quot;www.tinygroup.org/img/logo.gif&quot;)
#end</pre>这个时候，我们去执行的时候，忽然发现，程序不能正确运行了，去查看一下渲染的最终结果，居然是：<pre class="brush:html; toolbar: true; auto-links: false;">&lt;a href=&quot;www.tinygroup.org&quot; id=&quot;homepageLink&quot;&gt;&lt;img src=&quot;www.tinygroup.org/img/logo.gif&quot; &amp;nbsp;id=&quot;homepageLink&quot;&gt;&lt;/a&gt;</pre>这说明一个道理就是：<ul><li><span style="line-height:1.5;font-size:12.5px;">外层的宏中的变量，在内层的宏中是可以访问的</span></li><li><span style="line-height:1.5;font-size:12.5px;">内层中的变量，如果与外层中宏的变量名冲突，如果有传入，则按传入的值，如果没有传入，则取上层中的值</span></li></ul><p>正是基于上述原因，在Tiny UI框架中，所有宏定义，宏变量都必须前宏前缀，也就是说上面的两个宏定义要按下面的方式来进行定义：</p><pre class="brush:html; toolbar: true; auto-links: false;">#macro(link $linkHref $linkId)
&lt;a href=&quot;$!linkHref&quot;#if($linkId) id=&quot;$linkId&quot;#end&gt;$bodyContent&lt;/a&gt;
#end</pre><pre class="brush:html; toolbar: true; auto-links: false;">#macro(image $imageHref $imageId)
&lt;img src=&quot;$imageHref&quot;#if($imageId) id=&quot;$imageId<span></span>&quot;#end&gt;
#end</pre><p>小结：</p><p>虽然原因及解决办法都非常简单，但是也是吃了亏之后才总结出来的，希望能对也使用Velocicty或其它模板语言的同学有帮助。</p><p><span></span></p></div>]]#