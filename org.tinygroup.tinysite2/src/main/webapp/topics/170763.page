#pageTitle("topic","topic")
#title("Tiny框架","类Spring IoC容器 ")
#[[<div class="BlogContent"><p>在构建Tiny框架之初，想着是不是不要强依赖Spring？于是就写了一个类Spring的依赖注入容器，基本实现了Spring的依赖注入部分的功能，工作情况也良好，配置规范也是采用的Spring的规范。在前面一直是没有问题的，但是在做数据库业务的时候，出现问题了。做数据库，必须要考虑事务问题，而当时我的设计目标是对各种开源的ORMapping方案都不拒绝，这个时候就引入一个问题，要么自己再实现一套AOP,要么就复用Spring。当时预想的另外一个方案是核心框架采用非直接依赖Spring的方案，数据库相关的采用Spring依赖的方式。但是实际上，业务层面的Bean会依赖系统层面的Bean，这又涉及到两个容器之间的协作，这个时候，我意识到，是应该做一个取舍了。</p><p>所以果断放弃自己来做IOC和AOP方面的工作，而采用强依赖Spring来实现的方案，毕竟在现在的应用场景下，拒绝Spring就等于让别人拒绝自己。</p><p>但是，不管怎么样，在实现这个容器的过程中，还是让我对依赖注入方面有了更深的了解，因此，这两天的投入还是值得的。</p><p>下面展示一下，它实现的功能：</p><pre class="brush:java; toolbar: true; auto-links: false;">&lt;beans&gt;
	&lt;bean id=&quot;user&quot; name=&quot;user,user1,user2&quot; scope=&quot;singleton&quot;
		class=&quot;org.tinygroup.factory.config.User&quot;&gt;
		&lt;property name=&quot;name&quot;&gt;
			&lt;value&gt;aa&lt;/value&gt;
		&lt;/property&gt;
		&lt;property name=&quot;age&quot;&gt;
			&lt;value&gt;12&lt;/value&gt;
		&lt;/property&gt;
		&lt;property name=&quot;cat&quot;&gt;
			&lt;ref id=&quot;cat&quot; /&gt;
		&lt;/property&gt;
		&lt;property name=&quot;cats&quot;&gt;
			&lt;list&gt;
				&lt;ref id=&quot;cat&quot; /&gt;
			&lt;/list&gt;
		&lt;/property&gt;
		&lt;property name=&quot;catSet&quot;&gt;
			&lt;list&gt;
				&lt;ref id=&quot;cat&quot; /&gt;
			&lt;/list&gt;
		&lt;/property&gt;
		&lt;property name=&quot;catMap&quot;&gt;
			&lt;map&gt;
				&lt;entry key=&quot;aa&quot; value-ref=&quot;cat&quot;&gt;&lt;/entry&gt;
			&lt;/map&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	&lt;bean id=&quot;cat&quot; scope=&quot;singleton&quot; class=&quot;org.tinygroup.factory.config.Cat&quot; /&gt;
	&lt;bean id=&quot;cat1&quot; scope=&quot;prototype&quot; class=&quot;org.tinygroup.factory.config.Cat&quot; /&gt;
	&lt;bean id=&quot;aaa1&quot; scope=&quot;singleton&quot; class=&quot;org.tinygroup.factory.config.Aaa&quot;&gt;
		&lt;property name=&quot;name&quot;&gt;
			&lt;value&gt;aaa1&lt;/value&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	&lt;bean id=&quot;aaa&quot; scope=&quot;singleton&quot; class=&quot;org.tinygroup.factory.config.Aaa&quot;&gt;
		&lt;property name=&quot;name&quot;&gt;
			&lt;value&gt;aaa&lt;/value&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	&lt;bean id=&quot;bbb&quot; scope=&quot;singleton&quot; class=&quot;org.tinygroup.factory.config.Bbb&quot;
		autowire=&quot;byType&quot; /&gt;
	&lt;bean id=&quot;ccc&quot; scope=&quot;singleton&quot; class=&quot;org.tinygroup.factory.config.Ccc&quot;
		autowire=&quot;byName&quot; /&gt;
	&lt;bean id=&quot;user2&quot; name=&quot;user,user1,user2&quot; scope=&quot;prototype&quot;
		class=&quot;org.tinygroup.factory.config.User&quot;&gt;
		&lt;property name=&quot;name&quot;&gt;
			&lt;value&gt;aa1&lt;/value&gt;
		&lt;/property&gt;
		&lt;property name=&quot;age&quot;&gt;
			&lt;value&gt;121&lt;/value&gt;
		&lt;/property&gt;
		&lt;property name=&quot;cat&quot;&gt;
			&lt;ref id=&quot;cat1&quot; /&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
&lt;/beans&gt;</pre>可以看到，配置与Spring是兼容的。<p>下面是一些测试用例：</p><pre class="brush:java; toolbar: true; auto-links: false;"><span></span>public void testAutoAssemble() {
 assertNotNull(factory.getBean(&quot;aaa&quot;));
 Bbb bbb = factory.getBean(&quot;bbb&quot;);
 assertEquals(&quot;aaa&quot;, bbb.getAaa().getName());
 bbb = factory.getBean(&quot;bbb&quot;);
 assertEquals(&quot;aaa&quot;, bbb.getAaa().getName());
 Ccc ccc = factory.getBean(&quot;ccc&quot;);
 assertEquals(&quot;aaa1&quot;, ccc.getAaa1().getName());
 ccc = factory.getBean(&quot;ccc&quot;);
 assertEquals(&quot;aaa1&quot;, ccc.getAaa1().getName());
 }


 public void testInitComparePrototype() {
 Cat cat = factory.getBean(&quot;cat1&quot;);
 Cat cat1 = factory.getBean(&quot;cat1&quot;);
 assertEquals(false, cat == cat1);
 }


 public void testInitComparePrototype1() {
 User user = factory.getBean(&quot;user2&quot;);
 User user2 = factory.getBean(&quot;user2&quot;);
 assertEquals(false, user == user2);
 assertEquals(false, user.getCatMap() == user2.getCat());
 }</pre>小结：确实，现在要脱离Spring自己再实现一个容器，越来越不合适了，毕竟Spring的用户群在那里，大家都已经熟悉适用的东西，不管是从学习成本各方面都不会选择一个新东西。<p>OK，虽然是一个失败的实践，但是自己实现与看Spring源码的差别还是有的，就当是一次学习吧。当然，如果是在嵌入式系统或者受限制使用的环境中，只想使用IoC，还是有用处的，毕竟 20K大小的容量还是相当诱人的。</p></div>]]#