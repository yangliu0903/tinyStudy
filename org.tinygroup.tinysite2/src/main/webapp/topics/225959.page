#pageTitle("topic","topic")
#title("Tiny框架","新增TinyMessage，并实现邮件接收处理 ")
#[[<div class="BlogContent"><span id="OSC_h1_1"></span><h1>序言</h1><p>我们在业务处理过程中，经常要处理各种信息，比如：站内信息、邮件信息、还可能有短信、彩信，甚至可能与各种IM软件进行对立的信息系统。</p><p>Tiny框架也需要面对这个问题，不一样的是我觉得这几种类型的信息处理模式都是一样的，因此试图采用统一的模式进行处理。</p><p>在开始之前，我们先梳理一下需求：</p><p></p><ol><li><span style="line-height:1.5;font-size:12.5px;">可以支持各种信息系统如：短信，彩信，邮件，IM，站内信息的接收与发送</span></li><li>在接收或发送消息的时候可以进行各种逻辑处理，比如：收到某种类型的邮件怎么处理，收到某种内容的短信怎么处理。</li><li>邮件收到的时候，可以不删除，可以删除，也可以改成已读等各种状态</li><li>发送邮件的时候，可以附加各种附件，比如：来自文件的，来自内存的等等</li></ol><p></p><span id="OSC_h1_2"></span><h1>概念抽象</h1><p>因此，我们就抽象了下面的几个概念：</p><p><img src="http://static.oschina.net/uploads/space/2014/0424/085916_Vhc7_1245989.png" alt=""></img></p><ul><li><span style="line-height:1.5;font-size:12.5px;">MessageAccount：接收信息或发送信息时，需要帐户，因此抽象一个信息帐户概念。</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageReceiver：信息接收者</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageSender：信息发送者</span></li><li><span style="line-height:1.5;font-size:12.5px;">Message：要发送的信息，对应于邮件，短信，彩信之类</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageReceiveService：用于提供信息发送服务</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageSendService：用于提供信息接收服务</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageException：用于在出现问题的时候，抛出异常</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageSendProcessor：用于在发送信息的时候根据信息触发一些操作</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageReceiveProcessor：用于在接收信息的时候根据信息触发一些操作</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageManager：用于进行信息接收与发送</span></li></ul><span id="OSC_h1_3"></span><h1>行为分析</h1><p>当然，上面的概念的建立不是为了看看的，是要在我们的信息框架中参与的，当然它们中的一些就有一些行为，下面我们就分析一下这些概念的行为有哪些：</p><p><img src="http://static.oschina.net/uploads/space/2014/0424/090755_w4fP_1245989.png" alt=""></img></p><p>下面一个一个来分析一下：</p><ul><li><span style="line-height:1.5;font-size:12.5px;">MessageAccount：由于不同的信息模式，信息收发的帐号情况，并不一致，因此这里就只放个接口，没有办法进一步约束。同样的，MessageSender,Message,MessageReceiver也一样，因此，它们就是个空接口，把问题交给其后代来处理。</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageReceiveServer：用于接收信息，只有一个方法，返回信息。</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageSendService：用于发送信息，只有一个方法。</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageSendProcessor：用于在发送信息的时候根据信息情况触发一些操作，一个方法用于判断是否命中，一个进行真正的处理。</span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageReceiveProcessor：<span>用于在接收信息的时候根据信息情况触发一些操作，一个方法用于判断是否命中，一个进行真正的处理。</span></span></li><li><span style="line-height:1.5;font-size:12.5px;">MessageManager：它其实是对MessageReceiveService和MessageSendService的进一步封装，在这里提供了事件触发的一些扩展。</span></li></ul><p>在底层，只有MessageManager是有实现类的，即MessageManagerDefault，这也正常，由于其它的都不确定，所以就没法实现了。</p><p>到时为此，信息处理的底层抽象与设计就算完成了。</p><span id="OSC_h1_4"></span><h1>实现案例-Email收发</h1><p><img src="http://static.oschina.net/uploads/space/2014/0424/093736_NRBE_1245989.png" alt=""></img></p><p>到了收发邮件，因为已经是具体问题，因此上次留给子孙解决的问题，都可以解决了。</p><p>由于javax.email只是其中的一种可选方案，因此，在这里没有直接暴露任何与javax.email相关的接口，这样就更方便针对不同邮件API进行实现。</p><p>值得一提的是这里引入了一个新的接口：</p><p>EmailMessageFlagMarker：用来在收邮件时对邮件的状态进行不同的标示，这是因为不能简单的把收到到的邮件标示成删除或已读，可能要根据许多种情况进行判断。</p><span id="OSC_h1_5"></span><h1>邮件收发实例</h1><span id="OSC_h2_6"></span><h2>邮件接收</h2><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) throws MessageException {
    MessageManager&lt;EmailMessageAccount, EmailMessageSender, EmailMessageReceiver, EmailReceiveMessage&gt; messageManager = new MessageManagerDefault();
    EmailMessageAccount account = new EmailMessageAccount();
    account.setHost(&quot;127.0.0.1&quot;);
    account.setUsername(&quot;luoguo@tinygroup.org&quot;);
    account.setPassword(&quot;123456&quot;);
    messageManager.setMessageAccount(account);
    EmailMessageReceiveService messageReceiveService = new EmailMessageReceiveService();
    MessageReceiveService receiveService=messageReceiveService;
    MessageSendService messageSendService = new EmailMessageSendService();
    messageManager.setMessageReceiveService(receiveService);
    messageManager.setMessageSendService(messageSendService);
    messageReceiveService.setEmailMessageFlagMarker(new RemoveAllEmailMessageFlagMarker());
    Collection&lt;EmailReceiveMessage&gt; messages = messageManager.getMessages();
    for (EmailReceiveMessage message : messages) {
        System.out.println(&quot;subject:&quot; + message.getMessage().getSubject());
        System.out.println(&quot;content:&quot; + message.getMessage().getContent());
        System.out.println(&quot;附件:&quot; + message.getMessage().getAccessories().size());
        System.out.println(&quot;=============================================&quot;);
    }
}</pre><p><span></span></p><span id="OSC_h2_7"></span><h2>邮件发送示例</h2><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) throws IOException, MessageException {
    MessageManager&lt;EmailMessageAccount, EmailMessageSender, EmailMessageReceiver, EmailMessage&gt; messageManager = new MessageManagerDefault();
    EmailMessageAccount account = new EmailMessageAccount();
    account.setHost(&quot;127.0.0.1&quot;);
    account.setUsername(&quot;luoguo@tinygroup.org&quot;);
    account.setPassword(&quot;123456&quot;);
    EmailMessageSendService sendService = new EmailMessageSendService();
    EmailMessageSender messageSender = new EmailMessageSender();
    messageSender.setDisplayName(&quot;罗果&quot;);
    messageSender.setEmail(&quot;luoguo@tinygroup.org&quot;);
    EmailMessageReceiver messageReceiver = new EmailMessageReceiver();
    messageReceiver.setDisplayName(&quot;罗果&quot;);
    messageReceiver.setEmail(&quot;luog@tinygroup.org&quot;);
    EmailMessage emailMessage = new EmailMessage();
    emailMessage.setSubject(&quot;test1111111&quot;);
    emailMessage.setContent(&quot;中华人民共和国&quot;);
    EmailAccessory accessory = new EmailAccessory(new File(&quot;D:/RUNNING.txt&quot;));
    emailMessage.getAccessories().add(accessory);
    messageManager.setMessageAccount(account);
    MessageReceiveService messageReceiveService = new EmailMessageReceiveService();
    MessageSendService messageSendService = new EmailMessageSendService();
    messageManager.setMessageReceiveService(messageReceiveService);
    messageManager.setMessageSendService(messageSendService);
    Collection&lt;EmailMessageReceiver&gt; receivers = new ArrayList&lt;EmailMessageReceiver&gt;();
    receivers.add(messageReceiver);
    messageManager.sendMessage(messageSender, receivers, emailMessage);
}</pre>上面看起来比较复杂，实际是都是在构建Bean，如果是把Bean配在IOC容器中，就会非常简单了。<span id="OSC_h1_8"></span><h1>总结</h1><p>通过对各种信息的接收与发送进行分析，对信息处理进行了上层抽象，并简单的进行实现就可以实现各种信息的收发处理。</p><p>由于对各种信息处理都采用了统一的接口，在需要进行各种信息都要进行接收或发送的时候，开发人员就会非常方便。</p><p>所有的源码都可以在：<a href="http://git.oschina.net/tinyframework/tiny/tree/master/framework/org.tinygroup.message" target="_blank" rel="nofollow">http://git.oschina.net/tinyframework/tiny/tree/master/framework/org.tinygroup.message</a><span style="line-height:1.5;font-size:12.5px;">找到，感兴趣的童鞋可以前去查阅。</span></p></div>]]#