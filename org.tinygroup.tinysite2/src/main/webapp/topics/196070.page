#pageTitle("topic","topic")
#title("Tiny框架","Tiny并行计算框架之使用介绍 ")
#[[<div class="BlogContent"><p>呵呵，昨天看到两新粉，一激动，就想着今天来写这篇文章。</p><p>其实一直在关注这个领域，但是一直没有信心来写，所以一直期望着有一个开源的来用。</p><p>看到了彭渊大师的<a href="http://wot.51cto.com/2012/ppt/day1_04/pengyuan.pdf" target="_blank" rel="nofollow">淘宝分布式框架Fourinone介绍</a>，确实有一种相见恨晚的感觉，于是就准备去研究一番，详细见本人的感想文章由<a href="http://my.oschina.net/tinyframework/blog/191585" target="_blank" rel="nofollow">fourinone初步学习想到的<span></span></a>，确实来说，感觉到有一种啃不动的感觉，当然也可能是本人水平不足的原因所致。但是不管怎么说，促动了本人来写一个简单的并行计算框架。<span></span></p><p>在此引用本人的<a href="http://my.oschina.net/tinyframework/blog/193148" target="_blank" rel="nofollow">名言</a>：“<span style="color:#333333;line-height:22.5px;background-color:#FFFFFF;">牛人的代码就是生手也一看就懂；生手的代码就是牛人来了也看不懂。</span>”</p><p>好的，亲们，不管你是生手还是牛人，let&apos;s GO!</p><span id="OSC_h1_1"></span><h1>HelloWorld之一</h1><p>当然，还是从Hello说起，不过这次的hello与之前不太一样，管呢，先看看再说：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class WorkerHello extends AbstractWorker {
    public WorkerHello() throws RemoteException {
        super(&quot;hello&quot;);
    }

    public Warehouse doWork(Work work) throws RemoteException {
        String name = work.getInputWarehouse().get(&quot;name&quot;);
        System.out.println(String.format(&quot;id %s: Hello %s&quot;, getId(), name));
        Warehouse outputWarehouse = new WarehouseDefault();
        outputWarehouse.put(&quot;helloInfo&quot;, &quot;Hello,&quot; + name);
        return outputWarehouse;
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;"><span></span>首先，工人Hello继承自抽象工人，也就是说他首先得是个工人，然后呢是个Hello工人。</span></p><p>在它的构造函数中，抛出一个RemoteException，表明，它是可以被远程调用的工人,在构造方法中调用super(&quot;hello&quot;)，表明这个工人是个干hello活的工人。</p><p>既然是工人么，因此当然得做工作了。</p><p>首先从工作的的仓库中取出一个叫name的字符串，然后控制台打一下，然后构建了一个输出的仓库，在里面放了一个helloInfo的字符串，然后返回输出仓库，工人的任务就算完成了。</p><p>下面看看示例代码:</p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        JobCenter jobCenter = new JobCenterLocal();

        for (int i = 0; i &lt; 5; i++) {
            jobCenter.registerWorker(new WorkerHello());
        }

        Foreman helloForeman = new ForemanSelectOneWorker(&quot;hello&quot;);
        jobCenter.registerForeman(helloForeman);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Warehouse inputWarehouse = new WarehouseDefault();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inputWarehouse.put(&quot;name&quot;, &quot;world&quot;);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Work work = new WorkDefault(&quot;hello&quot;, inputWarehouse);


        Warehouse outputWarehouse = jobCenter.doWork(work);
        System.out.println(outputWarehouse.get(&quot;helloInfo&quot;));
        jobCenter.stop();
    }</pre><p><span style="font-size:12.5px;line-height:1.5;">首先开个职业介绍所，然后构建一了5个Hello工人，放在注册到职业介绍所去。</span></p><p>然后又注册了一个专门干hello活的包工头到职业介绍所，这个包工头有点特别，随便找一个hello工人来干hello这个活。</p><p>然后，构建了一个工作，介个工作是个hello工作，它的来料仓库里放了个name是world的值。<span></span></p><p>然后他就对职业介绍所说，你帮咱把这个活干干。</p><p>活干完了，也没有发生异常，顺利的在结果仓库里找到了helloInfo这个值，并且从控制台打出。</p><p>下面是运行结果：</p><pre class="brush:java; toolbar: true; auto-links: false;">id 46fbffdeb18b45f28cda4617795c2a52: Hello world
Hello,world</pre><p><span style="font-size:12.5px;line-height:1.5;">从上面的例子当中，我们理解了下面几个概念：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">职业介绍所：JobCenter,主要用于注册工人，注册包工头，接受或处理任务；

包工头：领取工作并招募工人，完成工作，并返回结果

工人：就是我们常说的民工了，只知道来料加工，处于生态环境的低层，最后还没有得工资

工作：只有工作类型和来料仓库
仓库：用于放各种来料或成品</pre><p><span style="font-size:12.5px;line-height:1.5;">职业介绍所，一般来说不用写，框架已经提供；工作，一般来说不用写；工头，绝大多数不需要写，框架已经提供了若干类型工头，一般够用了；工人，一定需要写。</span></p><p>自此，简单的hello并行计算就算完成了。</p><span id="OSC_h1_2"></span><h1>HelloWorld之二</h1><p>上面的hello工作完成之后，老板突发齐想，一个hello吼得声音太小了，偶想让所有的工人都帮偶齐声喊一起Hello,World，那该多壮观，当然老板有钱，说干就干：</p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) throws IOException, ClassNotFoundException {
        JobCenter jobCenter = new JobCenterLocal();
        for (int i = 0; i &lt; 5; i++) {
            jobCenter.registerWorker(new WorkerHello());
        }
        Foreman helloForeman = new ForemanSelectAllWorker(&quot;hello&quot;);
        jobCenter.registerForeman(helloForeman);

        Warehouse inputWarehouse = new WarehouseDefault();
        inputWarehouse.put(&quot;name&quot;, &quot;world&quot;);
        Work work = new WorkDefault(&quot;hello&quot;, inputWarehouse);
        jobCenter.doWork(work);
        jobCenter.stop();
}</pre><p><span style="font-size:12.5px;line-height:1.5;">当然，这次的包工头换了一下，这个包工头会找所有的工人来干活，结果如下：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">id 83274d8f8c194bb89d773c232e867cc4: Hello world
id 16fbf219d3cf4ba48eef23c260de509a: Hello world
id 9c17a119a4f341d68b589a503712b0f9: Hello world
id e7e3b2bdc9444a179ad62abdd35275e1: Hello world
id 4b12a1b70f5d43e2bff473382096dfbe: Hello world</pre><p><span style="font-size:12.5px;line-height:1.5;">老板一看，尼妈，这帮工人喊是喊完了，这声音就响过(用的是System.out)就没有了，也不知道有几个工人给喊过，包工头说哦，我没有干这收集数据的活，你想要呀，你想要就吱声呀，我加个结果合并给你：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) throws IOException, ClassNotFoundException {
    JobCenter jobCenter = new JobCenterLocal();
    for (int i = 0; i &lt; 5; i++) {
        jobCenter.registerWorker(new WorkerHello());
    }
    Foreman helloForeman = new ForemanSelectAllWorker(&quot;hello&quot;, new HelloWorkCombiner());
    jobCenter.registerForeman(helloForeman);

    Warehouse inputWarehouse = new WarehouseDefault();
    inputWarehouse.put(&quot;name&quot;, &quot;world&quot;);
    Work work = new WorkDefault(&quot;hello&quot;, inputWarehouse);
    Warehouse outputWarehouse = jobCenter.doWork(work);
    List&lt;String&gt; result = outputWarehouse.get(&quot;helloInfo&quot;);
    System.out.println(result.size());
    jobCenter.stop();
}</pre><p><span style="font-size:12.5px;line-height:1.5;">Hello结果收集器，用于把工人干的活合并成一个结果出来：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class HelloWorkCombiner implements WorkCombiner {

    public Warehouse combine(List&lt;Warehouse&gt; warehouseList) throws RemoteException {
        Warehouse warehouse = new WarehouseDefault();
        List&lt;String&gt; helloList = new ArrayList&lt;String&gt;();
        for (Warehouse w : warehouseList) {
            helloList.add((String) w.get(&quot;helloInfo&quot;));
        }
        warehouse.put(&quot;helloInfo&quot;, helloList);
        return warehouse;
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">老板终于称心如意了。</span></p><span id="OSC_h1_3"></span><h1>分布式求和</h1><p>老板消停了一下下，又想，偶想知道从1加到10000这个结果值是多少。但是一个计算机算，算得太慢了，能不能多几台机器帮我看看，让我早些知道结果？（仅用于说明原理，你可以理解为从1加到10000需要几个小时）</p><p>首先造个工人：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class WorkerSum extends AbstractWorker {
    public WorkerSum() throws RemoteException {
        super(&quot;sum&quot;);
    }

    public Warehouse doWork(Work work) throws RemoteException {
        long start = (Long) work.getInputWarehouse().get(&quot;start&quot;);
        long end = (Long) work.getInputWarehouse().get(&quot;end&quot;);
        long sum = 0;
        for (long i = start; i &lt;= end; i++) {
            sum += i;
        }
        Warehouse outputWarehouse = new WarehouseDefault();
        outputWarehouse.put(&quot;sum&quot;, sum);
        return outputWarehouse;
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">工人从来料仓库获取开始和结束，然后计算合计值并放在输出仓库中的sum值域中。</span></p><p>但是这活该怎么分给工人呢，工人算完的结果又怎么合并呢？</p><p>这个时候，就需要搞个工作分解合并器给包工头用了：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class SumSplitterCombiner implements WorkSplitterCombiner {
    public List&lt;Warehouse&gt; split(Work work, List&lt;Worker&gt; workers) throws RemoteException {
        List&lt;Warehouse&gt; list = new ArrayList&lt;Warehouse&gt;();
        long start = (Long) work.getInputWarehouse().get(&quot;start&quot;);
        long end = (Long) work.getInputWarehouse().get(&quot;end&quot;);
        long count = end - start + 1;
        long step = count / workers.size();
        for (int i = 0; i &lt; workers.size(); i++) {
            Warehouse subInputWarehouse = new WarehouseDefault();
            subInputWarehouse.put(&quot;start&quot;, step * i + start);
            if (i == workers.size() - 1) {
                subInputWarehouse.put(&quot;end&quot;, end);
            } else {
                subInputWarehouse.put(&quot;end&quot;, step * (i + 1));
            }
            list.add(subInputWarehouse);
        }
        return list;
    }


    public Warehouse combine(List&lt;Warehouse&gt; warehouseList) throws RemoteException {
        Warehouse outputWarehouse = new WarehouseDefault();
        long sum = 0;
        for (Warehouse w : warehouseList) {
            sum += (Long) w.get(&quot;sum&quot;);
        }
        outputWarehouse.put(&quot;sum&quot;, sum);
        return outputWarehouse;
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">一共两方法，一个分解方法，一个合并方法，非常容易理解。</span></p><p>万事具备，呵呵，开工：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class Test {
    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        JobCenter jobCenter = new JobCenterLocal();
        JobCenter center = new JobCenterRemote();
        for (int i = 0; i &lt; 5; i++) {
            center.registerWorker(new WorkerSum());
        }
        Foreman helloForeman = new ForemanSelectAllWorker(&quot;sum&quot;, new SumSplitterCombiner());
        center.registerForeman(helloForeman);
        Warehouse inputWarehouse = new WarehouseDefault();
        inputWarehouse.put(&quot;start&quot;, 1l);
        inputWarehouse.put(&quot;end&quot;, 10000l);
        Work work = new WorkDefault(&quot;sum&quot;, inputWarehouse);

        Warehouse outputWarehouse = center.doWork(work);
        System.out.println(outputWarehouse.get(&quot;sum&quot;));
        jobCenter.stop();
        center.stop();
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">注意，输入仓库是两个长整型数，因此，下面两句最后的值是1-10000，而不是11~100001</span></p><pre class="brush:java; toolbar: true; auto-links: false;">inputWarehouse.put(&quot;start&quot;, 1l);
        inputWarehouse.put(&quot;end&quot;, 10000l);</pre><div>下面是运算输出结果：</div><pre class="brush:java; toolbar: true; auto-links: false;">50005000</pre><span id="OSC_h1_4"></span><h1><span></span><span></span>多阶段任务</h1><p>当然，简单的任务都是一下就干完了的，复杂的工作就需要分成多个阶段进行了。不同的阶段需要的包工头或工人又都是不一定相同的。对于解决这种类型的任务，咱也有相当简单的解决办法。</p><p>先造个工人：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class WorkerHello extends AbstractWorker {
    public WorkerHello() throws RemoteException {
        super(&quot;hello&quot;);
    }

    public Warehouse doWork(Work work) throws RemoteException {
        String name = work.getInputWarehouse().get(&quot;name&quot;);
        System.out.println(String.format(&quot;id %s: Hello %s&quot;, getId(), name));
        Warehouse outputWarehouse = new WarehouseDefault();
        outputWarehouse.put(&quot;name&quot;, name + &quot;_1&quot;);
        return outputWarehouse;
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;"><span></span>这个工人有点怪，每次都是给名字后面附加一个&quot;_1&quot;，然后原样返回。别的没有啥子不同。</span></p><span id="OSC_h1_5"></span><h1><span style="font-weight:600;font-size:12.5px;line-height:1.5;">EN,然后来做做一系列的工作：</span></h1><p><span style="font-weight:600;font-size:12.5px;line-height:1.5;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class TestSerialWork {
    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        JobCenter jobCenter = new JobCenterLocal();
        for (int i = 0; i &lt; 5; i++) {
            jobCenter.registerWorker(new WorkerHello());
        }
        Foreman helloForeman = new ForemanSelectOneWorker(&quot;hello&quot;);
        jobCenter.registerForeman(helloForeman);
        Warehouse inputWarehouse = new WarehouseDefault();
        inputWarehouse.put(&quot;name&quot;, &quot;world&quot;);
        Work work = new WorkDefault(&quot;hello&quot;, inputWarehouse);
        work.setNextWork(new WorkDefault(&quot;hello&quot;)).setNextWork(new WorkDefault(&quot;hello&quot;));
        Warehouse warehouse = jobCenter.doWork(work);
        System.out.println(warehouse.get(&quot;name&quot;));
        jobCenter.stop();
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">与前面的例子唯一的不同就是</span></p><p><span style="font-weight:600;font-size:12.5px;line-height:1.5;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">work.setNextWork(new WorkDefault(&quot;hello&quot;)).setNextWork(new WorkDefault(&quot;hello&quot;));</pre><p><span style="font-size:12.5px;line-height:1.5;">这里通过指定下一工作，来建立了一个系列工作，这里定义的工作是三步，下面是运行结果：</span></p><p><span style="font-weight:600;font-size:12.5px;line-height:1.5;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">id 2a53a967e3b84289beb3dbaf12a7d8be: Hello world
id e3d471c27e264a1a87cf263605bfe9bd: Hello world_1
id 2a53a967e3b84289beb3dbaf12a7d8be: Hello world_1_1
world_1_1_1</pre><p><span style="font-size:12.5px;line-height:1.5;">运行结果与预期完全一致。</span></p><p><span style="font-weight:600;font-size:12.5px;line-height:1.5;">通过序列工作的方式可以把复杂的工作分解成简单的工作，而且不同的工作可以由不同的包工头和工人来完成。</span></p><p><span style="font-weight:600;font-size:12.5px;line-height:1.5;"></span></p><h1></h1><span id="OSC_h1_6"></span><h1>圆周率计算</h1><div>圆周率的计算一般来说是比较费时间的，详细fourinone作者在文章<a href="http://my.oschina.net/fourinone/blog/113731?p=3#comments" target="_blank" rel="nofollow">http://my.oschina.net/fourinone/blog/113731?p=3#comments</a>中已经在详细的描述，这里仅采用其文章中所述方法。</div><p><br></br></p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args)
{
	double pi=0.0;
	for(double i=1.0;i&lt;1000000001d;i++){
		pi += Math.pow(-1,i+1)/(2*i-1);
	}
	System.out.println(4*pi);
}</pre><p><span style="font-size:12.5px;line-height:1.5;">来计算，先</span><span style="font-size:12.5px;line-height:1.5;">创建个工人：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class PiWorker extends AbstractWorker {
    public PiWorker() throws RemoteException {
        super(&quot;pi&quot;);
    }

    @Override
    protected Warehouse doWork(Work work) throws RemoteException {
        long m = (Long) work.getInputWarehouse().get(&quot;start&quot;);
        long n = (Long) work.getInputWarehouse().get(&quot;end&quot;);
        double pi = 0.0d;
        for (double i = m; i &lt; n; i++) {
            pi += Math.pow(-1, i + 1) / (2 * i - 1);
        }
        work.getInputWarehouse().put(&quot;pi&quot;, 4 * pi);
        return work.getInputWarehouse();
    }
}</pre><p>再写个拆分合并器：</p><p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class PiSplitterCombiner implements WorkSplitterCombiner {
    public List&lt;Warehouse&gt; split(Work work, List&lt;Worker&gt; workers) throws RemoteException {
        List&lt;Warehouse&gt; list = new ArrayList&lt;Warehouse&gt;();
        long start = (Long) work.getInputWarehouse().get(&quot;start&quot;);
        long end = (Long) work.getInputWarehouse().get(&quot;end&quot;);
        long count = end - start + 1;
        long step = count / workers.size();
        for (int i = 0; i &lt; workers.size(); i++) {
            Warehouse subInputWarehouse = new WarehouseDefault();
            subInputWarehouse.put(&quot;start&quot;, step * i + start);
            if (i == workers.size() - 1) {
                subInputWarehouse.put(&quot;end&quot;, end);
            } else {
                subInputWarehouse.put(&quot;end&quot;, step * (i + 1));
            }
            list.add(subInputWarehouse);
        }
        return list;
    }
    public Warehouse combine(List&lt;Warehouse&gt; warehouseList) throws RemoteException {
        Warehouse outputWarehouse = new WarehouseDefault();
        double pi = 0d;
        for (Warehouse w : warehouseList) {
            pi += (Double) w.get(&quot;pi&quot;);
        }
        outputWarehouse.put(&quot;pi&quot;, pi);
        return outputWarehouse;
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">接下来是测试类</span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class Test {
    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        JobCenter jobCenter = new JobCenterLocal();
        for (int i = 0; i &lt; 10; i++) {
            jobCenter.registerWorker(new PiWorker());
        }
        Foreman helloForeman = new ForemanSelectAllWorker(&quot;pi&quot;, new PiSplitterCombiner());
        jobCenter.registerForeman(helloForeman);
        Warehouse inputWarehouse = new WarehouseDefault();
        inputWarehouse.put(&quot;start&quot;, 1l);
        inputWarehouse.put(&quot;end&quot;, 1000000001l);
        Work work = new WorkDefault(&quot;pi&quot;, inputWarehouse);

        Warehouse outputWarehouse = jobCenter.doWork(work);
        System.out.println(&quot;pi:&quot;+outputWarehouse.get(&quot;pi&quot;));
        jobCenter.stop();
    }
}</pre>运行结果：<pre class="brush:java; toolbar: true; auto-links: false;">并行计算运行结果：
time:10326ms pi:3.141592694075038
单线程计算运行结果
time:24857ms pi:3.1415926525880504</pre><p>这个结果是在本人笔记本跑出来的，笔记本是4核机器，而不是4CPU机器，所以4个并行跑，并没有得到期望的1/4的时间，而是1/2.4左右的时间，因此可以得出两个结论：</p><p>结论1：通过并行计算，确实可以缩短计算时间，更好的利用CPU资源。</p><p>绪论2：4核和4C还是有显著差异的。</p><span id="OSC_h1_7"></span><h1>小结</h1><div><span style="line-height:1.5;font-size:12.5px;font-weight:normal;">在上面的例子中，我们展示了分布式计算的使用，应该是老小兼宜，简单易懂。</span></div><p>职业介绍所，工人，工头，可以在一台计算机上的，也可以都在一台计算机上。</p><p>现在，你可以很牛掰的说，速度慢？哥给你搞个分布式计算不就快了？</p><p>下面一讲是<a href="http://my.oschina.net/tinyframework/blog/196373" target="_blank" rel="nofollow">实现机理</a>，亲们请<a href="http://my.oschina.net/tinyframework/blog/196373" target="_blank" rel="nofollow">移步</a>过去。</p><p><span></span></p></div>]]#