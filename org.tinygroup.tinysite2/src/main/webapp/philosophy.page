#pageTitle("philosophy","philosophy")
#title("philosophy","主要介绍Tiny框架的设计理念")


#@row()
    #@masonry()
    <!-- Content -->
        #@masonryItem()
            #@caption("使用灵活")
            <p>可以整个使用它，也可以只用它的一个或几个部分。</p>
            <p>Tiny构建者认为，一个完整的框架可能需要有许许多多个部分组成，但是对于实际应用的用户来说，它可能只需要其中的一部分功能。构架一定要有这种能力，可以由使用者进行点菜式，使用，避免只要用一点点功能，就要引入许许多多的内容。</p>
            #end
        #end

        #@masonryItem("big")
            #@caption("学习成本低、上手容易")
            <p>框架的学习成本必须非常低，这样才可以让使用者更容易上手，避免由于学习难度大而导致的学习曲线太陡、太长。</p>
            <p>经过许多次的实践，我们总结出来：有基础的JAVA开发人员经过半天的培训，就可以完全学会基于Tiny框架进行开发，经过1天到两天的实践就会变成熟手。</p>
            <p>对框架进行扩展或基于框架扩展接口进行扩展，则需要3天左右的培训，就可以完全掌握，经过一周的实践就会变成熟手。</p>
            #end
        #end

        #@masonryItem("big")
            #@caption("保持核心的稳定性")
            <p>Tiny框架是立足于在需要稳定、安全要求非常高的应用环境中使用的，因此其稳定性就是框架构建者首要思考目标，核心部分只使用经过充验证及广泛应用的第三方包。</p>
            <p>Tiny框架在构建过程中，曾经复用了某饱受赞誉基金会下的一个2.0版的开源包，结果在应用过程中出现了严重的内存泄露问题，最后不得已花费了非常大的工作量才清理干净，这也更让我们对选择第三方包的审慎。</p>
            #end
        #end

        #@masonryItem()
            #@caption("方便的外延性")
            <p>Tiny框架构建者也深深知道，自己不可能解决所有问题，所以，Tiny框架除了最小的核心之外所有的部分都是可选的、可替换的。</p>
            <p>Tiny框架对于第三方包的使用也完全持开放态度，这个可以完全由使用者自行选择，不做任何限制</p>
            #end
        #end

        #@masonryItem()
            #@caption("现有资产的可复用性")
            <p>由于考虑到企业应用的场景，Tiny框架构建者也知道，不可能所有的项目都是从零开始的，一定有一些项目是在现有基础上进行重新开发或者重构的，不管是哪种情况都需要把其中的一部分或者大部分复用起来，以充分降低成本、利用企业现有资产。</p>
            #end
        #end

        #@masonryItem("big")
            #@caption("资产的可积累性")
            <p>只有易于知识积累，才可以真正做到越用越强。</p>
            <p>Tiny框架正是基于上述观点，才提出一构建Tiny生态圈的概念。不管是私有生态圈还是共有生态圈，都是体现一种众人拾柴火焰高的思维，一起来扩展、一起来复用。</p>
            <p>当然Tiny框架也意识到光有口号是不行的，一定要有规范和机制进行保障，所以在Tiny框架中，许多地方都涉及到规范、元数据等内容，以实现资产可积累、复用的目标。</p>
            #end
        #end
    #end
#end