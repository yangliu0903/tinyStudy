#pageTitle("topic" "topic")
#title("Tiny框架" "TinyDBCluster Vs routing4db ")
#[[<div class="BlogContent"><p>routing4db的作者是@CodeFurtur，<span></span>主页详见：<a href="https://code.google.com/p/routing4db/" rel="nofollow">https://code.google.com/p/routing4db/</a></p><p>阅读了<span>routing4db的源码，当然理解上与作者还是有差距的，如果有错误之处，欢迎指正。</span><span></span></p><span id="OSC_h1_1"></span><h1>底层实现差异</h1><span id="OSC_h2_2"></span><h2>实现层次</h2><p>TinyDBCluster选择在Jdbc Driver层实现，因此不依赖各种Spring等框架；<span>routing4db选择在应用层解决，对datasource进行封装，因此，需要依赖Spring框架。</span></p><p><span><span>TinyDBCluster</span>对于开发人员来说，可以做到完全透明；在特殊场景下<span>routing4db，则需要开发人员遵守一定要求。</span></span></p><span id="OSC_h2_3"></span><h2><span>适用场景</span></h2><p><span><span>TinyDBCluster</span>可以适应于任何应用场景，甚至可以用第三方工具只要指定驱动driver，就可以使用。</span></p><p><span><span>routing4db只适应于上层应用，</span>第三方工具无法使用。</span></p><p><span></span></p><span id="OSC_h2_4"></span><h2>第三方框架支持<span style="line-height:1.5;font-size:12.5px;font-weight:normal;"></span></h2><p><span><span>TinyDBCluster支持所有第三方框架。</span></span></p><p><span><span>routing4db</span>对于Mybatis等基于工厂方式创建DAO的方式，需要进行增强。<br></br></span></p><span id="OSC_h2_5"></span><h2><span></span>路由处理</h2><p><span></span><span></span></p><p><span>TinyDBCluster采用SQL解析方式进行路由，</span><span>routing4db采用正则表达式进行方法路由；当然，相对来说SQL解析方式效率比正则要慢一些的，但是由于</span><span>TinyDBCluster内部采用了缓冲方式，同样的SQL语句不会解析第二次，因此效率也不会存在问题。</span></p><p><span><span><span>routing4db的正则表达式方法路由，对于开发人员是有要求的，即必须遵从</span>方法名规范。</span></span></p><p><span></span></p><pre class="brush:xml; toolbar: true; auto-links: false;">&lt;property name=&quot;readMethodPatterns&quot;&gt;
    &lt;list&gt;  
        &lt;value&gt;*get*&lt;/value&gt;
        &lt;value&gt;*find*&lt;/value&gt;
    &lt;/list&gt;
&lt;/property&gt;</pre><span id="OSC_h2_6"></span><h2><span>错误检测</span></h2><p><span><span>TinyDBCluster</span>只要是检测到数据库有错误，在进行负载的时候，会把失效的去掉。保证只要有可用的，就不会出现访问错误。</span></p><p><span><span>routing4db</span>中没有看到相关处理逻辑。<br></br></span></p><p><span style="font-size:12.5px;line-height:1.5;"><span></span></span></p><span id="OSC_h1_7"></span><h1>读写分离差异</h1><span></span><p><span style="font-size:12.5px;line-height:1.5;"></span></p><span id="OSC_h2_8"></span><h2>数据同步</h2><p>数据库同步，TinyDBCluster支持框架同步和数据库同步两种模式，当然<span>框架同步是以降低数据库处理能力来达到的，适合于写少读多的场景</span>。</p><p><span>routing4db只支持数据库同步模式。</span></p><span id="OSC_h2_9"></span><h2>路由算法</h2><p><span>TinyDBCluster的路由规则是如果事务及或写指令则在写库进行，如果是无事务读指令则在读库进行。虽然加重了写库的负担，但是可以保证数据逻辑是永远正确的。</span></p><p><span>routing4db</span>则是读指令在读库，写指令在写库。如果采用数据库同步的方案中，同步是有延迟的，此时可能有逻辑错误。</p><span id="OSC_h2_10"></span><h2>路由权重</h2><p><span>TinyDBCluster支持设定不同的权限，从而根据机器配置情况调整负载能力。</span></p><p><span><span>routing4db</span>只是简单平均分配，机器配置情况相同的情况也没有问题，如果机器配置不同的情况下，会出现别的处理能力有盈余，而有的处理能力则不足的情况。<br></br></span></p><span id="OSC_h1_11"></span><h1><span>路由策略</span></h1><p><span><span>TinyDBCluster</span>和<span>routing4db都是接口，因此都可以进行自定义扩展。</span></span></p><p><span><span><br></br></span></span></p><p><span></span></p><span id="OSC_h1_12"></span><h1>分表方面</h1>两者都支持分表处理，都支持事务一致性。不同之处在于<span>TinyDBCluster内部集成JTOM实现事务一致，<span>routing4db采用Spring实现事务一致。但是最终的目标是一致的。</span></span><br></br><p><span><span><span></span></span></span></p><span id="OSC_h1_13"></span><h1>集群部署方面</h1><p><span><span>routing4db</span>支持的部署方式，<span>TinyDBCluster都支持。</span><br></br></span></p><p><span>TinyDBCluster支持分区和分表混用的方式。即读写分离及数据表水平扩展方面混合使用。</span></p><p><span>routing4db中没有看到类似样例，不确定是否支持。</span></p><span id="OSC_h1_14"></span><h1>总结</h1><p><span>routing4db是国人实现的数据库读写分离及水平分表方面的一个良好实践，</span><span>TinyDBCluster在实现过程中，对于<span>routing4db支持的部署方式等方面进行了参考，学习到了相当多的内容，另外作者的代实现也表现了相当高的水准，值得大家学习与研究。</span></span></p><p><span></span><span>TinyDBCluster有一定的后发优势，另外由于在实现层次上的差异，确实提供了</span>比<span>routing4db</span>更多的功能特性，对于开发人员也更友好。</p><br></br></div>]]#