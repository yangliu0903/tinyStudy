#pageTitle("topic" "topic")
#title("Tiny乱弹" "主题切换及其管理")
#[[<div class="BlogContent"><p>引言：</p><p>在学习代码的过程中，看到如下几个工具方法：</p><pre class="brush:java; toolbar: true; auto-links: false;">// 获取指定包名下的所有类
    public static List&lt;Class&lt;?&gt;&gt; getClassList(String packageName, boolean isRecursive) {
        List&lt;Class&lt;?&gt;&gt; classList = new ArrayList&lt;Class&lt;?&gt;&gt;();
        try {
            Enumeration&lt;URL&gt; urls = getClassLoader().getResources(packageName.replace(&quot;.&quot;, &quot;/&quot;));
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                if (url != null) {
                    String protocol = url.getProtocol();
                    if (protocol.equals(&quot;file&quot;)) {
                        String packagePath = url.getPath();
                        addClass(classList, packagePath, packageName, isRecursive);
                    } else if (protocol.equals(&quot;jar&quot;)) {
                        JarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();
                        JarFile jarFile = jarURLConnection.getJarFile();
                        Enumeration&lt;JarEntry&gt; jarEntries = jarFile.entries();
                        while (jarEntries.hasMoreElements()) {
                            JarEntry jarEntry = jarEntries.nextElement();
                            String jarEntryName = jarEntry.getName();
                            if (jarEntryName.endsWith(&quot;.class&quot;)) {
                                String className = jarEntryName.substring(0, jarEntryName.lastIndexOf(&quot;.&quot;)).replaceAll(&quot;/&quot;, &quot;.&quot;);
                                if (isRecursive || className.substring(0, className.lastIndexOf(&quot;.&quot;)).equals(packageName)) {
                                    classList.add(loadClass(className, false));
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(&quot;获取类出错！&quot;, e);
            throw new RuntimeException(e);
        }
        return classList;
    }

    // 获取指定包名下指定注解的所有类
    public static List&lt;Class&lt;?&gt;&gt; getClassListByAnnotation(String packageName, Class&lt;? extends Annotation&gt; annotationClass) {
        List&lt;Class&lt;?&gt;&gt; classList = new ArrayList&lt;Class&lt;?&gt;&gt;();
        try {
            Enumeration&lt;URL&gt; urls = getClassLoader().getResources(packageName.replace(&quot;.&quot;, &quot;/&quot;));
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                if (url != null) {
                    String protocol = url.getProtocol();
                    if (protocol.equals(&quot;file&quot;)) {
                        String packagePath = url.getPath();
                        addClassByAnnotation(classList, packagePath, packageName, annotationClass);
                    } else if (protocol.equals(&quot;jar&quot;)) {
                        JarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();
                        JarFile jarFile = jarURLConnection.getJarFile();
                        Enumeration&lt;JarEntry&gt; jarEntries = jarFile.entries();
                        while (jarEntries.hasMoreElements()) {
                            JarEntry jarEntry = jarEntries.nextElement();
                            String jarEntryName = jarEntry.getName();
                            if (jarEntryName.endsWith(&quot;.class&quot;)) {
                                String className = jarEntryName.substring(0, jarEntryName.lastIndexOf(&quot;.&quot;)).replaceAll(&quot;/&quot;, &quot;.&quot;);
                                Class&lt;?&gt; cls = loadClass(className, false);
                                if (cls.isAnnotationPresent(annotationClass)) {
                                    classList.add(cls);
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(&quot;获取类出错！&quot;, e);
            throw new RuntimeException(e);
        }
        return classList;
    }

    // 获取指定包名下指定父类的所有类
    public static List&lt;Class&lt;?&gt;&gt; getClassListBySuper(String packageName, Class&lt;?&gt; superClass) {
        List&lt;Class&lt;?&gt;&gt; classList = new ArrayList&lt;Class&lt;?&gt;&gt;();
        try {
            Enumeration&lt;URL&gt; urls = getClassLoader().getResources(packageName.replace(&quot;.&quot;, &quot;/&quot;));
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                if (url != null) {
                    String protocol = url.getProtocol();
                    if (protocol.equals(&quot;file&quot;)) {
                        String packagePath = url.getPath();
                        addClassBySuper(classList, packagePath, packageName, superClass);
                    } else if (protocol.equals(&quot;jar&quot;)) {
                        JarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();
                        JarFile jarFile = jarURLConnection.getJarFile();
                        Enumeration&lt;JarEntry&gt; jarEntries = jarFile.entries();
                        while (jarEntries.hasMoreElements()) {
                            JarEntry jarEntry = jarEntries.nextElement();
                            String jarEntryName = jarEntry.getName();
                            if (jarEntryName.endsWith(&quot;.class&quot;)) {
                                String className = jarEntryName.substring(0, jarEntryName.lastIndexOf(&quot;.&quot;)).replaceAll(&quot;/&quot;, &quot;.&quot;);
                                Class&lt;?&gt; cls = loadClass(className, false);
                                if (superClass.isAssignableFrom(cls) &amp;&amp; !superClass.equals(cls)) {
                                    classList.add(cls);
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(&quot;获取类出错！&quot;, e);
            throw new RuntimeException(e);
        }
        return classList;
    }</pre><p><span style="font-size:12.5px;line-height:1.5;">第一感觉，觉得这几个方法肯定有问题，但是问题在哪里呢？</span></p><p>首先看直接看到的问题：</p><ul><li><span style="line-height:1.5;font-size:12.5px;">代码重复得比较多</span></li><li><span style="line-height:1.5;font-size:12.5px;">代码圈复杂度比较大</span></li><li>异常处理模式不能说错，但是是否合理值得商榷</li></ul><p>代码重复得比较多，是大家一眼就可以看得到的，但是怎么改?确实也是狗咬刺猬无从下口。<br></br><span style="line-height:1.5;font-size:12.5px;">代码圈复杂度，用来标示一个代码的复杂程度，不知道概念的话，问下度娘就知道了。<br></br>异常处理模式确实不能算错，也就是说只要有一个类出错，就导致整个处理中断。但是我个人对于处理Class，注解什么的，比较倾向于有错记下来，但是不要影响别的类的处理的模式。只能说两种模式各有优缺点，因此可以商榷。</span></p><p><span style="line-height:1.5;font-size:12.5px;">再来分析下深层次方面的问题</span></p><ul><li><span style="line-height:1.5;font-size:12.5px;">性能问题</span></li><li><span style="line-height:1.5;font-size:12.5px;">扩展问题</span></li></ul><p><span style="font-size:12.5px;line-height:1.5;">说到性能问题，我们都知道，应用大到一定程度的时候，Jar文件，类文件都是比较多的，如果每处理一个注解之类的就扫描一次，就会化大量的时候在重复的目录（JarEntry）遍历上；我在合计20M的Jar里遍历所有的class文件，在本人笔记本上大概是2S时间，如果注解多了，那可是一个注解2秒的时间呀。</span></p><p><span style="font-size:12.5px;line-height:1.5;">说到扩展问题，现在我们处理的都是Jar文件，那当然可能有本地文件，也可能有URL外部的文件，还可能有自已写的ClassLoader加载的其它文件，上面的处理无疑只能处理前面两种，如果是自己写的ClassLoader肯定是不在扫描之列了。另外，现在处理的是class文件，当然也可能处理的是一些xml文件或国际化文件等等。这样子一来，这里的工具方法岂不是要爆炸式增长？？</span></p><p><span style="font-size:12.5px;line-height:1.5;">当然，写此代码作者决非一般人等，如果简单，他不会让它留着的。</span></p><p><span style="font-size:12.5px;line-height:1.5;">因此，在这短短的几个方法里都就隐藏着怎样的秘密呢？，</span></p><div>且听<a href="http://my.oschina.net/tinyframework/blog/203233" target="_blank" rel="nofollow">下篇</a>分解。</div><p><span></span></p></div>]]#