#pageTitle("topic" "topic")
#title("算法感想" "框架的体系性与战术性角度分析 ")
#[[<div class="BlogContent"><p>昨天晚上在群里，与同学们一起讨论框架的问题。偶说了一个框架的体系性与战术性目标的概念，让同学们云里雾里，不明觉厉，也不明就里，那么今天偶就谈谈框架的<span>体系</span>与战术性角度，一家之言，说得不对还请海涵。</p><p>从军事上来说，战术性的战斗就是具体的一块无关紧要的战斗，胜就胜了，败就败了，局部互有长短，但是就全局来说没有本质的影响；而<span>体系</span>性的则是影响双方势力对比的重要关键点，是个死去活来的问题，是西风压倒东风还是东风压倒西风的问题。</p><p>做框架也是有同样的问题的，如果框架只能解决一个局部部分，或者说具体问题，那么就是战术性框架；比如一个Xml解析器，一个网络爬虫框架等等，都是解决具体问题的，因此不管做得怎么到位，怎么好，都是一个战术性的问题。</p><p>那么我再拿人们常说SSH框架来说，很明显Hibernate和Struts是属于战术性框架的。但是Spring则明显不同，表面上Spring本身只是提供了一系列的机制和体系，但是它本身并不做具体的某个方面的问题，他解决IOC,AOP之类的比较虚的问题，但是正因为如此，它占据了整个开源框架的核心位置，许许多多的别的框架都是非常容易被替换及剔除的，但是唯一的要剔除Spring就比较困难--或者说，剔除Spring，就需要找一个比Spring更好的方案来替代，没有找到之前，就很难真正剔除它。</p><p>偶也看了OSC上一些同学的框架的源代码，从解决具体的问题来说，技巧、慎密性、前卫性都不错，但是看来看去，感觉还是在战术性问题上打转转，也就是解决具体问题方面做得非常不错，但是在体系性方面就比较弱了。</p><p>在此，我也把自己对框架(Framework)的理解和大家交流，我的理解Framework一定是<span>Framework框架者构建的结构性、体系性、机制性的部分，而让使用者提供实际的、业务的、具体的实现的部分；当然<span>Framework构建者也可以提供一些实际的、业务的、具体的实现的部分，但是这只可以作为默认的、基本的实现，它在大多数的情况下都是够用的，但是在特殊情况下是可以被拿掉的，是可以被替换的。</span></span></p><p><span>也就是说，如果你达到上面要求，你才可以说是一个框架(Framework)，否则，你只是个Library，只是一个代码库，不能称之为一个框架。</span></p><p><span>可能有的同学们又说了，你呼扯海说了半天，你的Tiny框架怎么就是有<span>体系</span>性的了？？这正是我下面要解释的问题：</span></p><p><span>1.Tiny框架做了大量的体系性上思考，它不仅立足于解决开发问题，还考虑集成、发布、维护方面的问题。<br></br>2.Tiny框架构建了许多子框架，比如：流程框架，插件框架、UI框架等等，这些框架只有体系和机制及规范方面的内容，本身是不提供具体功能的，但是业务开发人员可以基于其之上进行扩展，来达成各种目标。<br></br>3.Tiny框架在在实现方面大都考虑有侵入性及无侵入性，也就是说如果你可以接受侵入性，那你就做起来更方便；如果你不接受侵入性，那么也可以使用Tiny框架的许多功能。<br></br>4.Tiny框架在集成方面下的功夫是最大的，可以方便实现自组装，也就是扔进去不用管的模式。<br></br>5.Tiny框架在模块化方面也是投入大量的力量，所有的资源都可以打入Jar包，不必修改web.xml就可以进行各种Web模板的加载等待。<br></br>6.Tiny框架的战略性目标是构建一个生态圈，做UI的，做逻辑的，做业务的能够做自己擅长的事情，通力协作。</span></p><p><span>所以，正因为Tiny框架做了许多体系性的工作，可能不能直接实现某个功能，但是它的作为体系在开发、协作、维护、支持各个阶段。</span></p><p>当然，Tiny框架中也包含了大量的解决实际问题的库和框架，同时也不拒绝各种开源框架的集成与使用。</p><p>因此，大的开发框架是个体系性的工程。所以，做开源框架之前，先要定位准确，是做战术性的还是体系性的框架，这样只做自己擅长，可控的事情，才得心应手，轻松愉快，同时又可以获得最大回报。</p></div>]]#