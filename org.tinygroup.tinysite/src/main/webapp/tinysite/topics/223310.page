#pageTitle("topic" "topic")
#title("Tiny框架" "主题切换及其管理")
#[[<div class="BlogContent"><span id="OSC_h1_1"></span><h1>序言</h1><p>如何让程序员更容易的开发Web界面，是一个持久的话题，所有的从事相关开发的公司都会碰到这个问题，并且被这个问题所深深困扰。</p><p>Tiny框架也不得不直视这个问题，确实来说，想解决这个问题，也是非常有难度与深度的，业界也有各种各样的尝试，这也是有各种各样不同框架出现的原因。</p><p><span style="line-height:1.5;font-size:12.5px;">Tiny框架构建者认为，</span><span style="line-height:1.5;font-size:12.5px;">完全采用一种框架解决所有问题，是不现实的。而且即使目前找得到一种非常好的框架，暂时可以满足应用需要，但是随着技术的发展，业务的进化，就会慢慢变得不再满足业务需要。因此，Tiny框架构建从不再把做一套UI组件去适各种需求作为自己的目标。</span></p><p>反过来，我们看看在做Web应用中，可能会碰到的问题：</p><ol><li><span style="line-height:1.5;font-size:10pt;">UI中JS的引入与顺序，JS合并的问题</span></li><li><span style="line-height:1.5;font-size:10pt;">UI中css的引入与顺序，CSS合并的问题</span></li><li><span style="line-height:1.5;font-size:10pt;">UI中碰到性能问题时的影响范围，比如：一个树出现问题，要改动许多用到树的地方</span></li><li>代码重复的问题，同样的内容在许多地方都有，如果要改动就要改动许多个地方</li><li>整体布局调整困难的问题</li><li>程序员需要关注的内容太多的问题，JS,CSS,布局，后台业务，前台展现，尼玛界面工程师必须得是全才才可以搞得定所有问题。</li><li>开发效率的问题</li><li>执行效率的问题，前台响应要求速度更快</li><li>集群的问题</li><li>国际化的问题</li><li>...</li></ol><p><span>因此，我在以前写过一篇文章：</span><a href="http://my.oschina.net/tinyframework/blog/169206" target="_blank" rel="nofollow">UI开发的终极解决方案</a><span>感兴趣的同学，可以去看看，今天的目标是利用TinyUI框架的重构SmartAdmin，使得更容易被使用。</span></p><span id="OSC_h1_2"></span><h1>SmartAdmin初识</h1><p><br></br></p><span id="OSC_h1_3"></span><h1><span style="font-size:12.5px;line-height:1.5;font-weight:normal;">SmartAdmin是一套基于JQuery,Bootstrap构建的UI组件库，说直白些，它就是个大杂烩，它把各种JQuery插件和Bootstrap整合到一起，提供了一整套基本完整的应用开发UI库，基本是拿着它就可以用来非常专业的应用系统了。<br></br></span></h1><span id="OSC_h1_4"></span><h1><span style="font-size:12.5px;line-height:1.5;font-weight:normal;">下面是界面，当然它内嵌提供了四套皮肤，可以进行切换的：</span></h1><p><img src="http://static.oschina.net/uploads/space/2014/0417/085559_R5hc_1245989.png" alt=""></img></p><p>由于SmartAdmin是商业产品，需要购买，因此不能提供其Copy，据说在Baidu可以搜到，据说可以下载。如果只是想看一下的话，请点击此链接：<a href="http://192.241.236.31/test4.smartadmin/" target="_blank" rel="nofollow">http://192.241.236.31/test4.smartadmin/</a></p><span id="OSC_h1_5"></span><h1>SmartAdmin分析</h1><p>通过对SmartAdmin的分析，发现其复用了大量的开源插件，并且利用了Ajax加载技术，在运行期加载了大量的JS插件或CSS，整个页面采用Html+JS整合而成，许多JS与页面还是分离的，也就是说对本页面中的Dom元素的处理的JS不一定在当前html文件中，所以要想看得懂是非常困难的，如果想把它应用在自己的项目当中，也是非常困难的一件事情。</p><p>举个例子来说，要显示一个小部件，需要写这么一段内容：</p><pre class="brush:html; toolbar: true; auto-links: false;">&lt;div class=&quot;jarviswidget&quot; id=&quot;wid-id-0&quot;&gt;
 &lt;!-- widget options:
 usage: &lt;div class=&quot;jarviswidget&quot; id=&quot;wid-id-0&quot; data-widget-editbutton=&quot;false&quot;&gt;
 
 data-widget-colorbutton=&quot;false&quot; 
 data-widget-editbutton=&quot;false&quot;
 data-widget-togglebutton=&quot;false&quot;
 data-widget-deletebutton=&quot;false&quot;
 data-widget-fullscreenbutton=&quot;false&quot;
 data-widget-custombutton=&quot;false&quot;
 data-widget-collapsed=&quot;true&quot;&amp;nbsp;
 data-widget-sortable=&quot;false&quot;
 
 --&gt;
 &lt;header&gt;
 &lt;h2&gt;&lt;strong&gt;Default&lt;/strong&gt; &lt;i&gt;Widget&lt;/i&gt;&lt;/h2&gt; 
 
 &lt;/header&gt;


 &lt;!-- widget div--&gt;
 &lt;div&gt;
 
 &lt;!-- widget edit box --&gt;
 &lt;div class=&quot;jarviswidget-editbox&quot;&gt;
 &lt;!-- This area used as dropdown edit box --&gt;
 &lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;
 &lt;span class=&quot;note&quot;&gt;&lt;i class=&quot;fa fa-check text-success&quot;&gt;&lt;/i&gt; Change title to update and save instantly!&lt;/span&gt;
 
 &lt;/div&gt;
 &lt;!-- end widget edit box --&gt;
 
 &lt;!-- widget content --&gt;
 &lt;div class=&quot;widget-body&quot;&gt;
 
 &lt;p&gt; Widget comes with a default 10 padding to the body which can be removed by adding the class &lt;code&gt;.no-padding&lt;/code&gt;&amp;nbsp;
 to the &lt;code&gt;.widget-body&lt;/code&gt; class. The default widget also comes with 5 widget buttons as displayed on top right&amp;nbsp;
 corner of the widget header. &lt;/p&gt;
 &lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn btn-default btn-lg&quot;&gt; &lt;strong&gt;Big&lt;/strong&gt; &lt;i&gt;Button&lt;/i&gt; &lt;/a&gt;
 
 &lt;/div&gt;
 &lt;!-- end widget content --&gt;
 
 &lt;/div&gt;
 &lt;!-- end widget div --&gt;
 
&lt;/div&gt;</pre>这个程序员处理起来还是相当有难度的，好吧，这还不算过分的。<p>执行下面的命令：</p><pre class="brush:lua; toolbar: true; auto-links: false;">dir *.js /s /w</pre>运行结果：<pre class="brush:java; toolbar: true; auto-links: false;">所列文件总数:
        310 个文件      6,043,053 字节</pre><p>执行下面的命令：</p><pre class="brush:lua; toolbar: true; auto-links: false;">dir *.css /s /w</pre>运行结果：<pre class="brush:java; toolbar: true; auto-links: false;">所列文件总数:
         36 个文件      1,511,412 字节</pre>里面有这么多的JS，有这么多的CSS，它们的引入顺序也是非常重要的，稍有差错，就会有js错误的问题。<p>再来看看，JS加载过程：</p><p><img src="http://static.oschina.net/uploads/space/2014/0417/093417_JwIh_1245989.png" alt=""></img><br></br>可以看到，要访问大量的js，CSS，对于服务器的压力是比较大的，客户端加载时间也是比较长的，程序员要厘清这些关系，也是非常困难的。</p><span id="OSC_h1_6"></span><h1>SmartAdmin重构</h1>对SmartAdmin重构，是指按照Tiny框架的体系结构来进行重构。<span id="OSC_h2_7"></span><h2>第一步，厘清关系</h2><p>通过整理，发现smartadmin中使用的js插件有如下之多：</p><pre class="brush:java; toolbar: true; auto-links: false;">bootstrap
bootstrapProgressbar
bootstrapSlider
bootstrapTags
bootstrapTimepicker
bootstraptree
bootstrapWizard
ckeditor
colorhelpers
colorpicker
datatables
delete-table-row
dropzone
easyPieChart
excanvas
fastclick
flot
FontAwesome
fueluxwizard
fullcalendar
ie-placeholder
ion-slider
jquery
jquery-form
jquery-nestable
jquery-touch
jqueryui
jqueryvalidate
js-migrate
jstorage
knob
markdown
maskedInput
maxlength
morris
msieFix
multiselect
notification
noUiSlider
pace
prettify
raphael
select2
selectToUISlider
smartadmin
smartwidgets
sparkline
summernote
superbox
throttle-denounce
typeahead
vectormap
x-editable</pre><span id="OSC_h2_8"></span><h2>第二步：UI插件，组件包化：</h2><p>比如JQuery组件包化，就是编写下面的文件：jquery.ui.xml</p><pre class="brush:java; toolbar: true; auto-links: false;">&lt;ui-components&gt;
    &lt;ui-component name=&quot;jquery&quot;&gt;
        &lt;js-resource&gt;/jquery/jquery-1.11.0.js&lt;/js-resource&gt;
    &lt;/ui-component&gt;
&lt;/ui-components&gt;</pre><p>比如JQueryUI组修的包化，就是编写下面的文件：jqueryui.ui.xml</p><pre class="brush:xml; toolbar: true; auto-links: false;">&lt;ui-components&gt;
    &lt;ui-component name=&quot;jqueryui&quot; dependencies=&quot;jquery&quot;&gt;
        &lt;js-resource&gt;/jqueryui/js/jquery-ui-1.10.4.custom.js&lt;/js-resource&gt;
        &lt;css-resource&gt;/jqueryui/css/smoothness/jquery-ui-1.10.4.custom.css&lt;/css-resource&gt;
    &lt;/ui-component&gt;
&lt;/ui-components&gt;</pre><p>比如BootStrap组件包化，就是写下面的文件：bootstrap.ui.xml</p><pre class="brush:java; toolbar: true; auto-links: false;">&lt;ui-components&gt;
    &lt;ui-component name=&quot;bootstrap&quot; dependencies=&quot;jqueryui&quot;&gt;
        &lt;css-resource&gt;/bootstrap/css/bootstrap.min.css&lt;/css-resource&gt;
        &lt;js-resource&gt;/bootstrap/js/bootstrap.js&lt;/js-resource&gt;
    &lt;/ui-component&gt;
&lt;/ui-components&gt;</pre><p><span style="font-size:12.5px;line-height:1.5;">其它类推，最主要的目的就是要分清，用到哪些JS,哪些CSS，并且整理组件包之间的依赖关系，比如，上面</span><span style="font-size:12.5px;line-height:1.5;">BootStrap就依赖了jqueryui，当然jqueryui依赖了JQuery</span></p><p>通过上面的依赖树Tiny框架就可以自动构建好CSS及JS资源。</p><p>因为这些资源都是放在Jar工程的main/resources目录中，因此就直接打进jar包了。</p><span id="OSC_h2_9"></span><h2>第三步，编写宏</h2><p>比如，原来的Tab，需要涉及到html,js，编写后续使用的宏如下：</p><pre class="brush:java; toolbar: true; auto-links: false;">#**
 * JqueryUI Tab
 * juiTab[1..1]
 *      juiTabHeader[1..1]
 *          juiTabHeaderItem[1..n]
 *      juiTabContentItem[1..n]
 *#

#macro(juiTab $juiTabId)
&lt;div id=&quot;$juiTabId&quot;&gt;
$bodyContent
&lt;/div&gt;
&lt;script&gt;
    $(document).ready(function(){
        $(&apos;#$juiTabId&apos;).tabs();
    });
&lt;/script&gt;
#end

#macro(juiTabHeader)
&lt;ul&gt;
$bodyContent
&lt;/ul&gt;
#end

#macro(juiTabHeaderItem $juiTabContentItemId)
&lt;li&gt;
    &lt;a href=&quot;#$juiTabContentItemId&quot;&gt;$bodyContent&lt;/a&gt;
&lt;/li&gt;
#end

#macro(juiTabContentItem $juiTabContentItemId)
&lt;div id=&quot;$juiTabContentItemId&quot;&gt;
$bodyContent
&lt;/div&gt;
#end</pre><p><span style="font-size:12.5px;line-height:1.5;">以后的程序员就可以以如下方式编写一个Tab页了：</span></p><p><span style="font-size:12.5px;line-height:1.5;"><span></span></span></p><pre class="brush:html; toolbar: true; auto-links: false;">#@juiTab(&quot;tabs&quot;)
    #@juiTabHeader()
        #@juiTabHeaderItem(&quot;tabs-a&quot;)First#end
        #@juiTabHeaderItem(&quot;tabs-b&quot;)Second#end
        #@juiTabHeaderItem(&quot;tabs-c&quot;)Third#end
    #end
    #@juiTabContentItem(&quot;tabs-a&quot;)
        tabs-a content
    #end
    #@juiTabContentItem(&quot;tabs-b&quot;)
        tabs-b content
    #end
    #@juiTabContentItem(&quot;tabs-c&quot;)
        tabs-c content
    #end
#end</pre><p>通过上面的处理，封闭了代码的具体实现，而换之以容易理解的宏，在提升开发人员开发效率方面，提升代码的易维护性方面都有显著提升。尤其是在需要变化的时候，只要接口不变化，很多的时候，只要修改宏定义即可，对于程序员写的界面文件，完全可以做到透明化处理。</p><span id="OSC_h1_10"></span><h1>重构之后的结果</h1><p><img src="http://static.oschina.net/uploads/space/2014/0417/095647_eKv2_1245989.png" alt=""></img></p><p>可以看到，重构之后的界面样式与原来没有任何变化。</p><p>接下来看看，JS的加载：从原来的许多个js文件，变成只加载两个，说明js文件已经被合并并压缩传输。</p><p><img src="http://static.oschina.net/uploads/space/2014/0417/095845_XPrk_1245989.png" alt=""></img></p><p>再来看看css的加载，可以看到，也是只需要一个就可以了：</p><p><img src="http://static.oschina.net/uploads/space/2014/0417/100106_Nfi0_1245989.png" alt=""></img></p><p>重构之后写个小组件，是下面的样子：</p><pre class="brush:html; toolbar: true; auto-links: false;">#@jarvisWidget(&quot;wid-id-0&quot; &apos;&lt;strong&gt;Default&lt;/strong&gt; &lt;i&gt;Widget&lt;/i&gt;&apos;)

    #@jarvisWidgetHeader()
    #end
    #@jarvisWidgetBody()
        #@widgetEditBox()
        &lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;
        &lt;span class=&quot;note&quot;&gt;&lt;i class=&quot;fa fa-check text-success&quot;&gt;&lt;/i&gt; Change title to update and save instantly!&lt;/span&gt;
        #end
        #@widgetBody()
        &lt;p&gt; Widget comes with a default 10 padding to the body which can be removed by adding the class
            &lt;code&gt;.no-padding&lt;/code&gt;
            to the &lt;code&gt;.widget-body&lt;/code&gt; class. The default widget also comes with 5 widget buttons as
            displayed on top right
            corner of the widget header. &lt;/p&gt;
        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn btn-default btn-lg&quot;&gt; &lt;strong&gt;Big&lt;/strong&gt; &lt;i&gt;Button&lt;/i&gt;
        &lt;/a&gt;
        #end
    #end
#end</pre><span id="OSC_h1_11"></span><h1>总结</h1><p>通过对SmartAdmin进行重构，成功的理清了smartadmin中的css,js关系，便于进行后续复用。</p><p>通过编写宏，可以在组件开发人员与页面开发人员之间进行隔离。由组件开发人员与js,css等打交道，而让页面开发人员只关注业务展现。</p><p><br></br></p></div>]]#