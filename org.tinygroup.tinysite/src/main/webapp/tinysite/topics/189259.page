#pageTitle("topic" "topic")
#title("Tiny框架" "TinyIOC ")
#[[<div class="BlogContent"><p>在动不动就是SSH的年代，IOC，AOP不是啥新东东。Spring之所以庞大，是因为集成了太多太多的功能。</p><p>验证性的开发了一下，仅实现IOC、<span style="line-height:1.5;font-size:12.5px;">AOP、子容器简单实践一下。</span></p><p><span style="line-height:1.5;font-size:12.5px;">当然了，必须以HelloWorld示例：</span></p><p>接口：</p><p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public interface Hello {
    void sayHello(String name);
}</pre><p><span style="font-size:12.5px;line-height:1.5;">实现：</span></p><p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">@Singleton
@Named(&quot;abc&quot;)
public class Hello1Impl implements Hello {
    public void sayHello(String name) {
        System.out.println(&quot;Hello:&quot; + name);
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">测试：</span></p><p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) {
        BeanContainer container = BeanContainerFactory.getBeanContainer();
        container.registerClass(Hello1Impl.class);
        Hello hello = container.getBeanByType(Hello.class);
        hello.sayHello(&quot;abc&quot;);
        hello = container.getBeanByName(&quot;abc&quot;);
        hello.sayHello(&quot;def&quot;);
    }</pre><p><span style="font-size:12.5px;line-height:1.5;">运行结果：</span></p><p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">Hello:abc
Hello:def</pre><p>可以看到根据接口和命名访问都是没有问题的。</p><p><span style="font-size:12.5px;line-height:1.5;">再来一个AOP的例子：</span></p><p><span style="line-height:1.5;font-size:12.5px;">先写个拦截器：</span></p><p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">@Request
public class InterceptorImpl implements InterceptorBefore, InterceptorAfter, InterceptorException {
    public void after(Object object, Method method, Object... args) {
        System.out.println(String.format(&quot;%s-&gt;after\n&quot;, method.getName()));
    }

    public void before(Object object, Method method, Object... args) {
        System.out.println(String.format(&quot;%s-&gt;before\n&quot;, method.getName()));
    }

    public void exception(Object object, Method method, Throwable throwable, Object... args) {
        System.out.println(String.format(&quot;%s-&gt;exception:%s\n&quot;, method.getName(), throwable.getMessage()));
    }
}</pre><p>拦截点有前置，后置及异常，可以实现在一个类上，也可以实现在不同的类上。如果有状态的，则应该配成Prototype或Request类型，否则要考虑线程安全问题。</p>还是用前面的HelloImpl做测试：<p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) {
        BeanContainer container = BeanContainerFactory.getBeanContainer();
        container.registerClass(InterceptorImpl.class);
        container.registerClass(HelloImpl.class);
        container.addAop(new AopDefine(&quot;.*HelloImpl&quot;, &quot;sayHello&quot;, &quot;.*&quot;, InterceptorImpl.class.getName()));
        Hello hello = container.getBeanByType(Hello.class);
        hello.sayHello(&quot;abc&quot;);
    }</pre><p><span style="font-size:12.5px;line-height:1.5;">运行结果：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">sayHello-&gt;before
Hello:abc
sayHello-&gt;after</pre><p><span style="font-size:12.5px;line-height:1.5;">当然了，上面的类注册都是手工添加的，实际使用，会增加一个类扫描器自动添加到容器中的。</span></p><p><span style="line-height:1.5;font-size:12.5px;">再来看一个子容器的类子：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">public static void main(String[] args) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BeanContainer container = BeanContainerFactory.getBeanContainer();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; container.registerClass(InterceptorImpl.class);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; container.registerClass(HelloImpl.class);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; container.registerClass(Hello1Impl.class);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BeanContainer subContainer = BeanContainerFactory.getBeanContainer(&quot;subContainer&quot;);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; subContainer.registerClass(HelloHelperImpl.class);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; subContainer.setParent(container);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; container.addAop(new AopDefine(&quot;.*Hello1Impl&quot;, &quot;sayHello&quot;, &quot;.*&quot;, InterceptorImpl.class.getName()));
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; subContainer.addAop(new AopDefine(&quot;.*&quot;, &quot;set.*&quot;, &quot;.*&quot;, InterceptorImpl.class.getName()));
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloHelper helloHelper = subContainer.getBeanByType(HelloHelper.class);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; helloHelper.sayHello(&quot;abc&quot;);
    }</pre><p><span style="font-size:12.5px;line-height:1.5;">在上面的示例中，创建了一个容器，一个子容器，然后把子容器放在父容器下。</span></p><p><span style="font-size:12.5px;line-height:1.5;"><span></span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class Hello1Impl implements Hello {
    public void sayHello(String name) {
        System.out.println(&quot;Hello:&quot; + name);
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">HelloHelper</span></p><pre class="brush:java; toolbar: true; auto-links: false;">public interface HelloHelper {
    Hello getHello();

    List&lt;Hello&gt; getHelloList();

    void sayHello(String name);
}</pre><p><span style="line-height:1.5;font-size:12.5px;">HelloHelperImpl</span></p><p><span style="line-height:1.5;font-size:12.5px;"></span></p><pre class="brush:java; toolbar: true; auto-links: false;">@Singleton
public class HelloHelperImpl implements HelloHelper {
    @Inject
    Hello hello;
    @Inject
    private List&lt;Hello&gt; helloList;

    public void setHelloList(List&lt;Hello&gt; helloList) {
        this.helloList = helloList;
    }

    public void setHello(Hello hello) {
        this.hello = hello;
    }

    public Hello getHello() {
        return<span style="font-family:Consolas, &apos;Bitstream Vera Sans Mono&apos;, &apos;Courier New&apos;, Courier, monospace;line-height:14.65625px;background-color:#F8F8F8;">hello</span>;
    }

    public List&lt;Hello&gt; getHelloList() {
        return helloList;
    }

    public void sayHello(String name) {
        hello.sayHello(name);
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">下面是运行结果：</span></p><pre class="brush:java; toolbar: true; auto-links: false;">setHello-&gt;before
setHello-&gt;after
setHelloList-&gt;before
setHelloList-&gt;after
sayHello-&gt;before
Hello:abc
sayHello-&gt;after</pre><p>Jar包大小：</p><p>16,208 tinyioc-0.0.12-SNAPSHOT.jar</p></div>]]#