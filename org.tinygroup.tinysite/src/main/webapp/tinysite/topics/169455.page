#pageTitle("topic" "topic")
#title("算法感想" "主题切换及其管理")
#[[<div class="BlogContent"><p>在问答区看到这个问题，下面7788的回答，真是千奇百怪。</p><p>因此，花了几分钟写了一下，不一定是最优解，但是效率和速度应该还可以，代码如下：</p><pre class="brush:java; toolbar: true; auto-links: false;">public class Test1 {
&amp;nbsp; public static void main(String[] args) {
&amp;nbsp; &amp;nbsp; long start = System.currentTimeMillis();
&amp;nbsp; &amp;nbsp; for (int i = 1; i &lt;= 10; i++) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; printNumberNotRepeat(i, new ArrayList&lt;Integer&gt;());
&amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println();
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; long end = System.currentTimeMillis();
&amp;nbsp; &amp;nbsp; System.out.println(end - start);
&amp;nbsp; }
&amp;nbsp; private static void printNumberNotRepeat(int length,
&amp;nbsp; &amp;nbsp; &amp;nbsp; ArrayList&lt;Integer&gt; numberList) {
&amp;nbsp; &amp;nbsp; for (int n = 0; n &lt;= 9; n++) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; if (numberList.contains(n)) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue;
&amp;nbsp; &amp;nbsp; &amp;nbsp; } else {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ArrayList&lt;Integer&gt; newList = new ArrayList&lt;Integer&gt;(numberList);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; newList.add(n);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (length &gt; 1) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (newList.get(0) == 0) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue;// 如果是以0开头，则结束
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printNumberNotRepeat(length - 1, newList);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;//print(newList);//暂时注释是为了避免打印花费太长时间
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; }
&amp;nbsp; private static void print(ArrayList&lt;Integer&gt; newList) {
&amp;nbsp; &amp;nbsp; for (int i : newList) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.print(i);
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; System.out.print(&quot; &quot;);
&amp;nbsp; }
}</pre>简单剖析：<pre class="brush:java; toolbar: true; auto-links: false;">&amp;nbsp; public static void main(String[] args) {
&amp;nbsp; &amp;nbsp; long start = System.currentTimeMillis();
&amp;nbsp; &amp;nbsp; for (int i = 1; i &lt;= 10; i++) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; printNumberNotRepeat(i, new ArrayList&lt;Integer&gt;());
&amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println();
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; long end = System.currentTimeMillis();
&amp;nbsp; &amp;nbsp; System.out.println(end - start);
&amp;nbsp; }</pre>main方法，主要进行计时，同时调用方法来对10位以内非重复数字进行查找。<pre class="brush:java; toolbar: true; auto-links: false;">&amp;nbsp; private static void printNumberNotRepeat(int length,
&amp;nbsp; &amp;nbsp; &amp;nbsp; ArrayList&lt;Integer&gt; numberList) {
&amp;nbsp; &amp;nbsp; for (int n = 0; n &lt;= 9; n++) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; if (numberList.contains(n)) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue;
&amp;nbsp; &amp;nbsp; &amp;nbsp; } else {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ArrayList&lt;Integer&gt; newList = new ArrayList&lt;Integer&gt;(numberList);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; newList.add(n);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (length &gt; 1) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (newList.get(0) == 0) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue;// 如果是以0开头，则结束
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printNumberNotRepeat(length - 1, newList);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;print(newList);//暂时注释是为了避免打印花费太长时间
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; }</pre>核心算法，用于打印指定长度的非空自然数，采用了递归算法。<p>参数length表示计算的层数，每递归一次少一。</p><p>由于数字是不断增加的，因此必须每多一个数字，都要新建一个对象，程序逻辑中还避免了以0开头的多位数。</p><p>不一定是最优解（理论上上一层算过的值下一次还是有用的，因此还可以优化，哪位大神写写看？），但是效率应该还算可以，在本人笔记本上大概3545ms左右。当然上面的算法有个好处是打印的结果还是自然数的序列，没有乱序。</p><p><span>打印3层的解如下</span></p><pre class="brush:java; toolbar: true; auto-links: false;">0 1 2 3 4 5 6 7 8 9 
10 12 13 14 15 16 17 18 19 20 21 23 24 25 26 27 28 29 30 31 32 34 35 36 37 38 39 40 41 42 43 45 46 47 48 49 50 51 52 53 54 56 57 58 59 60 61 62 63 64 65 67 68 69 70 71 72 73 74 75 76 78 79 80 81 82 83 84 85 86 87 89 90 91 92 93 94 95 96 97 98 
pre></div>]]#