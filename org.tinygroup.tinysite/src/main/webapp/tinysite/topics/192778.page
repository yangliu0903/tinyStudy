#pageTitle("topic" "topic")
#title("Tiny框架" "主题切换及其管理")
#[[<div class="BlogContent"><p>分布式锁在分布式应用当中是要经常用到的，主要是解决分布式资源访问冲突的问题。</p><p>一开始考虑采用ReentrantLock来实现，但是实际上去实现的时候，是有问题的，<span>ReentrantLock的lock和unlock要求必须是在同一线程进行，而分布式应用中，lock和unlock是两次不相关的请求，因此肯定不是同一线程，因此导致无法使用<span>ReentrantLock。</span></span></p><p><span>接下来就考虑采用自己做个状态来进行锁状态的记录，结果发现总是死锁，仔细一看代码，能不锁死么。</span></p><p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public synchronized void lock(){
    while(lock){
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
    lock=true;
...
}

public synchronized void unlock(){
    lock=false;
...
}</pre><p><span style="font-size:12.5px;line-height:1.5;">第一个请求要求获得锁，好么，给他个锁定状态，然后他拿着锁去干活了。</span></p><p><span style="line-height:1.5;font-size:12.5px;">这个时候，第二个请求也要求锁，OK,他在lock中等待解锁。</span></p><p><span>第一个干完活了，过来还锁了，这个时候悲催了，因为，他进不了unlock方法了。</span></p><p><span>可能有人会问，为什么采用while，而不是采用wait...notify?这个问题留一下，看看有人能给出来不？</span></p><p><span>总之，上面的方安案流产了。</span></p><p><span>同样，不把synchronized 放在方法上，直接放在方法里放个同步对象可以不？？道理是一样的，也会发生上面一样的死锁。</span></p><p><span>到此为止前途一片黑暗。</span></p><p><span><span><a href="http://my.oschina.net/shenxueliang" target="_blank" rel="nofollow">@沈学良</a>同学的<a href="http://my.oschina.net/shenxueliang/blog/135865" rel="nofollow">http://my.oschina.net/shenxueliang/blog/135865</a>写了一个用zk做的同布锁，感觉还是比较复杂的且存疑。自己做不出来吧，又不死心。</span></span></p><p><span><span>再来看看Lock的接口，想了一下，不遵守Lock的接口了。编写了下面的接口。</span></span></p><p><span><span></span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public interface DistributedLock extends RemoteObject {

    long lock() throws RemoteException, TimeoutException;

    long tryLock(long time, TimeUnit unit) throws RemoteException, TimeoutException;

    void unlock(long token) throws RemoteException;

}</pre><p><span style="font-size:12.5px;line-height:1.5;">呵呵，眼尖的同学可能已经发现不同了。</span></p><p><br></br></p><p>lock方法增加了个long返回值，tryLock方法，返回的也不是boolean，也是long，unlock方法多了一个long参数型参数，呵呵，技巧就在这里了。</p><p><br></br></p><pre class="brush:java; toolbar: true; auto-links: false;">public class DistributedLockImpl extends UnicastRemoteObject implements DistributedLock {
&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 超时单位
&amp;nbsp; &amp;nbsp; &amp;nbsp;*/
&amp;nbsp; &amp;nbsp; private TimeUnit lockTimeoutUnit = TimeUnit.SECONDS;
&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 锁的令牌
&amp;nbsp; &amp;nbsp; &amp;nbsp;*/
&amp;nbsp; &amp;nbsp; private volatile long token = 0;
&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 同步对象
&amp;nbsp; &amp;nbsp; &amp;nbsp;*/
&amp;nbsp; &amp;nbsp; byte[] lock = new byte[0];
&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* 默认永不超时
&amp;nbsp; &amp;nbsp; &amp;nbsp;*/
&amp;nbsp; &amp;nbsp; long lockTimeout = 60 * 60;//默认超时3600秒
&amp;nbsp; &amp;nbsp; long beginLockTime;//获取令牌时间，单位毫秒


&amp;nbsp; &amp;nbsp; public DistributedLockImpl() throws RemoteException {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; super();
&amp;nbsp; &amp;nbsp; }


&amp;nbsp; &amp;nbsp; /**
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param lockTimeout 锁超时时间，如果加锁的对象不解锁，超时之后自动解锁
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @param lockTimeoutUnit 
&amp;nbsp; &amp;nbsp; &amp;nbsp;* @throws RemoteException
&amp;nbsp; &amp;nbsp; &amp;nbsp;*/
&amp;nbsp; &amp;nbsp; public DistributedLockImpl(long lockTimeout, TimeUnit lockTimeoutUnit) throws RemoteException {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; super();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.lockTimeout = lockTimeout;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.lockTimeoutUnit = this.lockTimeoutUnit;
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; public long lock() throws TimeoutException {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return tryLock(0, TimeUnit.MILLISECONDS);
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; private boolean isLockTimeout() {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (lockTimeout &lt;= 0) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return (System.currentTimeMillis() - beginLockTime) &lt; lockTimeoutUnit.toMillis(lockTimeout);
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; private long getToken() {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; beginLockTime = System.currentTimeMillis();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; token = System.nanoTime();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return token;
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; public long tryLock(long time, TimeUnit unit) throws TimeoutException {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; synchronized (lock) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; long startTime = System.nanoTime();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while (token != 0 &amp;&amp; isLockTimeout()) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; try {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (time &gt; 0) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; long endTime = System.nanoTime();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (endTime - startTime &gt;= unit.toMillis(time)) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw new TimeoutException();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Thread.sleep(1);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } catch (InterruptedException e) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //DO Noting
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return getToken();
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; public void unlock(long token) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (this.token != 0 &amp;&amp; token == this.token) {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.token = 0;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw new RuntimeException(&quot;令牌&quot; + token + &quot;无效.&quot;);
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
&amp;nbsp; &amp;nbsp; }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">下面对代码进行一下讲解。</span></p><p><br></br></p><p>上面的代码提供了，永远等待的获取锁的lock方法和如果在指定的时间获取锁失败就获得超时异常的tryLock方法，另外还有一个unlock方法。</p><p>技术的关键点实际上就是在token上，上面的实现，有一个基本的假设，就是两次远程调用之间的时间不可能在1纳秒之内完成。因此，每次锁的操作都会返回一个长整型的令牌，就是当时执行时间的纳秒数。下次解锁必须用获得的令牌进行解锁，才可以成功。如此，解锁就不用添加同步操作了，从而解决掉上面死锁的问题。</p><p>实际上，没有令牌也是可以的，但是那样就会导致a获取了锁，但是b执行unlock也会成功解锁，是不安全的，而加入令牌，就可以保证只有加锁者才可以解锁。</p><p>下面是测试代码：</p><p><br></br></p><pre class="brush:java; toolbar: true; auto-links: false;">public class TestDLock {
    public static void main(String[] args) throws Exception {
        RmiServer rmiServer = new LocalRmiServer();
        DistributedLockImpl distributedLock = new DistributedLockImpl();
        rmiServer.registerRemoteObject(&quot;lock1&quot;, distributedLock);
        MultiThreadProcessor processor = new MultiThreadProcessor(&quot;aa&quot;);
        for (int i = 0; i &lt; 8; i++) {
            processor.addProcessor(new RunLock(&quot;aa&quot; + i));
        }
        long s = System.currentTimeMillis();
        processor.start();
        long e = System.currentTimeMillis();
        System.out.println(e - s);
        rmiServer.unexportObject(distributedLock);
    }
}

class RunLock extends AbstractProcessor {
    public RunLock(String name) {
        super(name);
    }

    @Override
    protected void action() throws Exception {
        try {
            RmiServer client = new RemoteRmiServer();
            DistributedLock lock = client.getRemoteObject(&quot;lock1&quot;);
            for (int i = 0; i &lt; 1000; i++) {
                long token = lock.lock();
                lock.unlock(token);
            }
            System.out.println(&quot;end-&quot; + Thread.currentThread().getId());
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }
}</pre><p><span style="font-size:12.5px;line-height:1.5;">运行情况：</span></p><p><br></br></p><p><br></br></p><pre class="brush:java; toolbar: true; auto-links: false;">-0    [main] INFO   - 线程组&lt;aa&gt;运行开始,线程数8...
-3    [aa-aa0] INFO   - 线程&lt;aa-aa0&gt;运行开始...
-3    [aa-aa1] INFO   - 线程&lt;aa-aa1&gt;运行开始...
-3    [aa-aa2] INFO   - 线程&lt;aa-aa2&gt;运行开始...
-3    [aa-aa3] INFO   - 线程&lt;aa-aa3&gt;运行开始...
-3    [aa-aa4] INFO   - 线程&lt;aa-aa4&gt;运行开始...
-4    [aa-aa5] INFO   - 线程&lt;aa-aa5&gt;运行开始...
-4    [aa-aa6] INFO   - 线程&lt;aa-aa6&gt;运行开始...
-8    [aa-aa7] INFO   - 线程&lt;aa-aa7&gt;运行开始...
end-19
-9050 [aa-aa3] INFO &amp;nbsp; - 线程&lt;aa-aa3&gt;运行结束
end-17
-9052 [aa-aa1] INFO &amp;nbsp; - 线程&lt;aa-aa1&gt;运行结束
end-20
-9056 [aa-aa4] INFO &amp;nbsp; - 线程&lt;aa-aa4&gt;运行结束
end-16
-9058 [aa-aa0] INFO &amp;nbsp; - 线程&lt;aa-aa0&gt;运行结束
end-21
-9059 [aa-aa5] INFO &amp;nbsp; - 线程&lt;aa-aa5&gt;运行结束
end-26
-9063 [aa-aa7] INFO &amp;nbsp; - 线程&lt;aa-aa7&gt;运行结束
end-18
-9064 [aa-aa2] INFO &amp;nbsp; - 线程&lt;aa-aa2&gt;运行结束
end-22
-9065 [aa-aa6] INFO &amp;nbsp; - 线程&lt;aa-aa6&gt;运行结束
-9066 [main] INFO &amp;nbsp; - 线程组&lt;aa&gt;运行结束, 用时:9065ms
9069</pre><p><span style="font-size:12.5px;line-height:1.5;">也就是</span><span style="font-size:12.5px;line-height:1.5;"></span><span style="font-size:12.5px;line-height:1.5;">9069</span><span style="font-size:12.5px;line-height:1.5;"></span><span style="font-size:12.5px;line-height:1.5;">ms中执行了8000次锁定及解锁操作。</span></p><p>小结：</p><p>上面的分布式锁实现方案，综合考虑了实现简单，锁安全，锁超时等因素。实际测试，大概900到1000次获取锁和释放锁操作每秒，可以满足大多数应用要求。</p><p><span><span>由于昨天有粉要求尽快发出，因此发得比较匆忙，不足之处及BUG在所难免，欢迎拍砖。</span></span></p><p><span><span></span></span></p></div>]]#