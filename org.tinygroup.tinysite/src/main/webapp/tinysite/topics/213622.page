#pageTitle("topic" "topic")
#title("Tiny框架" "主题切换及其管理")
#[[<div class="BlogContent"><p>源码地址：<br></br>http://git.oschina.net/tinyframework/tiny</p><p>http://git.oschina.net/tinyframework/tiny/tree/master/framework/org.tinygroup.pc<span style="line-height:1.5;font-size:12.5px;"></span></p><p>前面和果粉们说了，要在200果粉齐了的时候就开源分布式计算框架，在偶死皮赖脸的乞讨声中，终于够200了，没啥好说滴，开吧。</p><p>先说说我当时做分布式计算框架的背景故事，本来开始时我是需要一个分布式计算框架的，但是读了fourinone之后，我觉得我吃不下或者说搞不定fourinone，因为我使用一个开源框架的前提是要么我可以吃定它，要么有许多人都在用，我可以相信它。很明显，许多人都在用fourinone还没有得到验证，因此我选择看看是否可以吃定它，但是看了三天之后，我放弃了，因此我选择自己做一个大家都能搞定的。</p><p>由于看了fourinone，感觉它的一些概念还是设计得不错的，在编写TinyPC时借鉴了一些fourinone的概念，但是代码是一行也没有拿来主义的，因此，还算不得抄袭吧。</p><span id="OSC_h1_1"></span><h1>基本概念</h1><span id="OSC_h2_2"></span><h2>Warehouse</h2><p>手工仓库：用于存放各种分布式数据时的输入与输出内容。<br></br>它本身继承一Context接口，同时可以放入一个子仓库，子仓库中的内容也可以被读取到。</p><p><img src="http://static.oschina.net/uploads/space/2014/0327/165131_TzLe_1245989.png" alt=""></img></p><span id="OSC_h2_3"></span><h2>Worker</h2><p>工人：用于对工作进行实际的运算。</p><p><img src="http://static.oschina.net/uploads/space/2014/0327/165248_ecIC_1245989.png" alt=""></img></p>考虑到工人的工作自由，可以在某种情况下拒绝接受工作，此时可以在acceptWork方法返回false，当然最大多数情况，直接返回true是正确的选择。<span id="OSC_h2_4"></span><h2>Foreman</h2><p>工头：用于对工作进行分解及合并，同时带带着一帮工人来完成任务。</p><p><img src="http://static.oschina.net/uploads/space/2014/0327/165505_Rjs4_1245989.png" alt=""></img></p><p>当然，工头有多种类型的工头，有的工头是只要是随便找一个人干活，此时就不需要分解与合并器了，此时它主要相当于负载均衡。有的工头则是需要好多个工人来一起协作共同快速的完成任务，这个时候就需要有分解合并器了。</p><span id="OSC_h2_5"></span><h2>JobCenter</h2><p>职介所：提供一个空间，供工头、工人来注册，同时也用于完成雇主提交的任务。</p><img src="http://static.oschina.net/uploads/space/2014/0327/165829_9FFZ_1245989.png" alt=""></img><p>可以看到职业介绍所确实复杂多了，但是幸运的是不需要自己来编写，只要使用就好了。</p><span id="OSC_h2_6"></span><h2>Work</h2><p>工作：每一项要完成的任务都可以是一个工作了，它带着一个输入手工仓库，在处理完毕之后，会有一个输出手工仓库。工作的是否需要进行序列化表明工作在没有处理完之前职业介绍所停止时工作是否会丢失。指明需要序列化的工作永远不会丢失，除非它被成功处理。<span></span></p><p>由于是异布执行，无法直接返回处理结果，因此如果需要进行回调，可以采用构建一个新工作的方式来处理返回结果。</p><p><img src="http://static.oschina.net/uploads/space/2014/0327/170051_kPEr_1245989.png" alt=""></img></p><p>可以看到工作的方法也不少，但是幸运的是，工作也不需要自己写，只要使用就好了。</p><span id="OSC_h2_7"></span><h2>WorkSplitter</h2><p>工作分解器：有时候一个任务处理时间太长，这个时候就需要许多台机器一起协作来执行，这个时候工头可以利用一个工作分解器把大的工作，分解成小的工作。</p><p><img src="http://static.oschina.net/uploads/space/2014/0327/170247_Be7x_1245989.png" alt=""></img></p><span id="OSC_h2_8"></span><h2>WorkCombiner</h2><p>工作合并器：工作被分解后，被许多个工人完成之后，需要把子任务的结果合并成一个结果后再返回，此时需要一个工作合并器。</p><img src="http://static.oschina.net/uploads/space/2014/0327/170444_anR6_1245989.png" alt=""></img><span id="OSC_h2_9"></span><h2>WorkSpliterCombiner</h2><p>工作分解合并器：它继承了工作分解和工作合并器，一般情况下，这两个都是配套使用的，因此，也可以通过它只写一个实现类来完成。</p><span id="OSC_h1_10"></span><h1>协作关系</h1><p>职业介绍所有两种，一种是本地职业介绍所，一种是远程职业介绍所。顾名思义，本地职业介绍所就是在当前计算机上的，远程职业介绍所用于连接到远程职业介绍所的。</p><p><span>工人、工头都可以加入到职业介绍所，所以加到本地或远程种业介绍所都是可以的。</span></p><p>在同一个职业介绍所中，具有同样类型的工人、工头和工作都存在的时候，工作就可以被安排下去执行。当然，有两种安排方式，一种是即时响应式的，具体的来说就是调用职业介绍所的doWork方法，如果此时有同样类型的工人和工头，那么就去执行，如果没有对应类型的工人或工头，则抛出无法执行的异常。这一种是同步方式处理工作。</p><p>另外一种方式是把工作添加职业介绍所即可，不关心工作是什么时候执行的，执业介绍所会对工作进行撮合，撮合并成功执行之后就把工作从工作列表之间清除。这一种是异步方式处理工作。</p><span id="OSC_h1_11"></span><h1>简单示例</h1><p>下面是一计算PI的值的分布式计算示例：</p><p><img src="http://static.oschina.net/uploads/space/2014/0327/205037_fSAV_1245989.jpg" alt=""></img></p><p>从上图看上，一共只有3个类，一个是工作分解合并器，一个是工人，一个是测试入口类。</p><span id="OSC_h2_12"></span><h2>PiWorker类</h2><pre class="brush:java; toolbar: true; auto-links: false;">public class PiWorker extends AbstractWorker {
	private static final long serialVersionUID = -1455631976934664413L;

	public PiWorker() throws RemoteException {
        super(&quot;pi&quot;);
    }
    protected Warehouse doWork(Work work) throws RemoteException {
        long m = (Long) work.getInputWarehouse().get(&quot;start&quot;);
        long n = (Long) work.getInputWarehouse().get(&quot;end&quot;);
        double pi = 0.0d;
        for (double i = m; i &lt; n; i++) {
            pi += Math.pow(-1, i + 1) / (2 * i - 1);
        }
        work.getInputWarehouse().put(&quot;pi&quot;, 4 * pi);
        return work.getInputWarehouse();
    }
}</pre><span id="OSC_h2_13"></span><h2>PiSplitterCombiner类</h2><pre class="brush:java; toolbar: true; auto-links: false;">public class PiSplitterCombiner implements WorkSplitterCombiner {
    private static final long serialVersionUID = -5365903331944759368L;
    public List&lt;Warehouse&gt; split(Work work, List&lt;Worker&gt; workers) throws RemoteException {
        List&lt;Warehouse&gt; list = new ArrayList&lt;Warehouse&gt;();
        LongRangeSpliter longRangeSpliter = new LongRangeSpliter();
        List&lt;Range&lt;Long&gt;&gt; rangePairList = longRangeSpliter.split((Long) work.getInputWarehouse().get(&quot;start&quot;), (Long) work.getInputWarehouse().get(&quot;end&quot;), workers.size());
        for (Range range : rangePairList) {
            Warehouse subInputWarehouse = new WarehouseDefault();
            subInputWarehouse.put(&quot;start&quot;, range.getStart());
            subInputWarehouse.put(&quot;end&quot;, range.getEnd());
            list.add(subInputWarehouse);
        }
        return list;
    }
    public Warehouse combine(List&lt;Warehouse&gt; warehouseList) throws RemoteException {
        Warehouse outputWarehouse = new WarehouseDefault();
        double pi = 0d;
        for (Warehouse w : warehouseList) {
            pi += (Double) w.get(&quot;pi&quot;);
        }
        outputWarehouse.put(&quot;pi&quot;, pi);
        return outputWarehouse;
    }
}</pre><span id="OSC_h2_14"></span><h2>Test类</h2><pre class="brush:java; toolbar: true; auto-links: false;">public class Test {
    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        JobCenter jobCenter = new JobCenterLocal();
        for (int i = 0; i &lt; 10; i++) {
            jobCenter.registerWorker(new PiWorker());
        }
        Foreman helloForeman = new ForemanSelectAllWorker(&quot;pi&quot;, new PiSplitterCombiner());
        jobCenter.registerForeman(helloForeman);
        Warehouse inputWarehouse = new WarehouseDefault();
        inputWarehouse.put(&quot;start&quot;, 1l);
        inputWarehouse.put(&quot;end&quot;, 1000000001l);
        Work work = new WorkDefault(&quot;pi&quot;, inputWarehouse);
        Warehouse outputWarehouse = jobCenter.doWork(work);
        System.out.println(String.format(&quot;pi:%s&quot;, outputWarehouse.get(&quot;pi&quot;)));
        jobCenter.stop();
    }
}</pre><span id="OSC_h1_15"></span><h1>示例解释</h1><p>首先建立一个本地职业介绍所</p><pre class="brush:java; toolbar: true; auto-links: false;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JobCenter jobCenter = new JobCenterLocal();</pre>然后添加10个会算PI的工人<pre class="brush:java; toolbar: true; auto-links: false;">for (int i = 0; i &lt; 10; i++) {
            jobCenter.registerWorker(new PiWorker());
        }</pre><p>然后添加一个会做算PI任务的工头，当然，他还需要一个对求PI进行任务分解与合并的处理器</p><pre class="brush:java; toolbar: true; auto-links: false;">Foreman helloForeman = new ForemanSelectAllWorker(&quot;pi&quot;, new PiSplitterCombiner());
        jobCenter.registerForeman(helloForeman);<span></span></pre><p>然后添加一个手工仓库，里面放了两值，一个开始一个结束,这两个值算PI工人会用到</p><pre class="brush:java; toolbar: true; auto-links: false;">Warehouse inputWarehouse = new WarehouseDefault();
        inputWarehouse.put(&quot;start&quot;, 1l);
        inputWarehouse.put(&quot;end&quot;, 1000000001l);</pre><p>然后创建一个求PI的工作，并把刚才的手工仓库放入工作，然后让职业介绍所做这项工作，然后输出工作的输入仓库中的pi变量</p><pre class="brush:java; toolbar: true; auto-links: false;">Work work = new WorkDefault(&quot;pi&quot;, inputWarehouse);
        Warehouse outputWarehouse = jobCenter.doWork(work);
        System.out.println(String.format(&quot;pi:%s&quot;, outputWarehouse.get(&quot;pi&quot;)));</pre><p>最后关闭职业介绍所，结束程序</p><pre class="brush:java; toolbar: true; auto-links: false;">jobCenter.stop();</pre><p><strong>算PI的算法：</strong><strong>http://fourinone.iteye.com/blog/1829349</strong></p><span id="OSC_h1_16"></span><h1>运行结果</h1><pre class="brush:xml; toolbar: true; auto-links: false;">-0    [main] DEBUG  - 开始注册对象:WorkQueue
-2    [Thread-2] DEBUG  - 开始检测已注册对象的可用性
-96   [main] DEBUG  - 结束注册对象:WorkQueue
-124  [main] DEBUG  - 开始注册对象:Worker|pi|3c29555265304dff8e7500e6d2ff444e
-130  [main] DEBUG  - 结束注册对象:Worker|pi|3c29555265304dff8e7500e6d2ff444e
-130  [main] DEBUG  - 开始注册对象:Worker|pi|11ea430b537f4721a5a4a61b3b887cca
-130  [main] DEBUG  - 结束注册对象:Worker|pi|11ea430b537f4721a5a4a61b3b887cca
-130  [main] DEBUG  - 开始注册对象:Worker|pi|39e9d1a14cf544c29794e300ac9cbb91
-131  [main] DEBUG  - 结束注册对象:Worker|pi|39e9d1a14cf544c29794e300ac9cbb91
-131  [main] DEBUG  - 开始注册对象:Worker|pi|dd9d0c0b47dd4e18bbf31d7778e3fac1
-131  [main] DEBUG  - 结束注册对象:Worker|pi|dd9d0c0b47dd4e18bbf31d7778e3fac1
-131  [main] DEBUG  - 开始注册对象:Worker|pi|ef68753086374341b80acc66c1b6877a
-132  [main] DEBUG  - 结束注册对象:Worker|pi|ef68753086374341b80acc66c1b6877a
-132  [main] DEBUG  - 开始注册对象:Worker|pi|35b8df60692d455a96a4dc6dc855fef7
-132  [main] DEBUG  - 结束注册对象:Worker|pi|35b8df60692d455a96a4dc6dc855fef7
-132  [main] DEBUG  - 开始注册对象:Worker|pi|348e96c03b434158bd0ef026d33b35fb
-133  [main] DEBUG  - 结束注册对象:Worker|pi|348e96c03b434158bd0ef026d33b35fb
-133  [main] DEBUG  - 开始注册对象:Worker|pi|08d17dd9b7a64eeeaf0a541836a44500
-134  [main] DEBUG  - 结束注册对象:Worker|pi|08d17dd9b7a64eeeaf0a541836a44500
-134  [main] DEBUG  - 开始注册对象:Worker|pi|c766db4f2ecd49df807458cb010c9fb8
-134  [main] DEBUG  - 结束注册对象:Worker|pi|c766db4f2ecd49df807458cb010c9fb8
-135  [main] DEBUG  - 开始注册对象:Worker|pi|2240ed47fc9d4bf1a8029920b2cd4edd
-135  [main] DEBUG  - 结束注册对象:Worker|pi|2240ed47fc9d4bf1a8029920b2cd4edd
-167  [main] DEBUG  - 开始注册对象:Foreman|pi|fdf013969d33499ca5f5213149fc2134
-183  [main] DEBUG  - 结束注册对象:Foreman|pi|fdf013969d33499ca5f5213149fc2134
-348  [RMI TCP Connection(1)-192.168.211.1] INFO   - 任务[type:pi,id:0a0dc7334de245109f17eafe064ef54a]被分割为10份
-369  [RMI TCP Connection(1)-192.168.211.1] DEBUG  - 线程组&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi&gt;运行开始,线程数10...
-369  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-35b8df60692d455a96a4dc6dc855fef7] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-35b8df60692d455a96a4dc6dc855fef7&gt;运行开始...
-371  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-35b8df60692d455a96a4dc6dc855fef7] DEBUG  - worker:35b8df60692d455a96a4dc6dc855fef7开始执行
-411  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-39e9d1a14cf544c29794e300ac9cbb91] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-39e9d1a14cf544c29794e300ac9cbb91&gt;运行开始...
-469  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-ef68753086374341b80acc66c1b6877a] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-ef68753086374341b80acc66c1b6877a&gt;运行开始...
-513  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-3c29555265304dff8e7500e6d2ff444e] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-3c29555265304dff8e7500e6d2ff444e&gt;运行开始...
-514  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-348e96c03b434158bd0ef026d33b35fb] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-348e96c03b434158bd0ef026d33b35fb&gt;运行开始...
-514  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-11ea430b537f4721a5a4a61b3b887cca] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-11ea430b537f4721a5a4a61b3b887cca&gt;运行开始...
-514  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-08d17dd9b7a64eeeaf0a541836a44500] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-08d17dd9b7a64eeeaf0a541836a44500&gt;运行开始...
-514  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-c766db4f2ecd49df807458cb010c9fb8] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-c766db4f2ecd49df807458cb010c9fb8&gt;运行开始...
-514  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-2240ed47fc9d4bf1a8029920b2cd4edd] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-2240ed47fc9d4bf1a8029920b2cd4edd&gt;运行开始...
-515  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-39e9d1a14cf544c29794e300ac9cbb91] DEBUG  - worker:39e9d1a14cf544c29794e300ac9cbb91开始执行
-515  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-dd9d0c0b47dd4e18bbf31d7778e3fac1] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-dd9d0c0b47dd4e18bbf31d7778e3fac1&gt;运行开始...
-515  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-ef68753086374341b80acc66c1b6877a] DEBUG  - worker:ef68753086374341b80acc66c1b6877a开始执行
-527  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-3c29555265304dff8e7500e6d2ff444e] DEBUG  - worker:3c29555265304dff8e7500e6d2ff444e开始执行
-527  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-348e96c03b434158bd0ef026d33b35fb] DEBUG  - worker:348e96c03b434158bd0ef026d33b35fb开始执行
-590  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-2240ed47fc9d4bf1a8029920b2cd4edd] DEBUG  - worker:2240ed47fc9d4bf1a8029920b2cd4edd开始执行
-591  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-c766db4f2ecd49df807458cb010c9fb8] DEBUG  - worker:c766db4f2ecd49df807458cb010c9fb8开始执行
-644  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-11ea430b537f4721a5a4a61b3b887cca] DEBUG  - worker:11ea430b537f4721a5a4a61b3b887cca开始执行
-702  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-08d17dd9b7a64eeeaf0a541836a44500] DEBUG  - worker:08d17dd9b7a64eeeaf0a541836a44500开始执行
-702  [id:0a0dc7334de245109f17eafe064ef54a,type:pi-dd9d0c0b47dd4e18bbf31d7778e3fac1] DEBUG  - worker:dd9d0c0b47dd4e18bbf31d7778e3fac1开始执行
-18309 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-3c29555265304dff8e7500e6d2ff444e] DEBUG  - worker:3c29555265304dff8e7500e6d2ff444e执行完成
-18309 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-3c29555265304dff8e7500e6d2ff444e] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-3c29555265304dff8e7500e6d2ff444e&gt;运行结束
-18399 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-11ea430b537f4721a5a4a61b3b887cca] DEBUG  - worker:11ea430b537f4721a5a4a61b3b887cca执行完成
-18399 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-11ea430b537f4721a5a4a61b3b887cca] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-11ea430b537f4721a5a4a61b3b887cca&gt;运行结束
-18450 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-dd9d0c0b47dd4e18bbf31d7778e3fac1] DEBUG  - worker:dd9d0c0b47dd4e18bbf31d7778e3fac1执行完成
-18450 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-dd9d0c0b47dd4e18bbf31d7778e3fac1] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-dd9d0c0b47dd4e18bbf31d7778e3fac1&gt;运行结束
-18613 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-348e96c03b434158bd0ef026d33b35fb] DEBUG  - worker:348e96c03b434158bd0ef026d33b35fb执行完成
-18614 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-348e96c03b434158bd0ef026d33b35fb] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-348e96c03b434158bd0ef026d33b35fb&gt;运行结束
-21298 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-35b8df60692d455a96a4dc6dc855fef7] DEBUG  - worker:35b8df60692d455a96a4dc6dc855fef7执行完成
-21298 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-35b8df60692d455a96a4dc6dc855fef7] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-35b8df60692d455a96a4dc6dc855fef7&gt;运行结束
-21377 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-2240ed47fc9d4bf1a8029920b2cd4edd] DEBUG  - worker:2240ed47fc9d4bf1a8029920b2cd4edd执行完成
-21377 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-2240ed47fc9d4bf1a8029920b2cd4edd] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-2240ed47fc9d4bf1a8029920b2cd4edd&gt;运行结束
-22418 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-c766db4f2ecd49df807458cb010c9fb8] DEBUG  - worker:c766db4f2ecd49df807458cb010c9fb8执行完成
-22418 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-c766db4f2ecd49df807458cb010c9fb8] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-c766db4f2ecd49df807458cb010c9fb8&gt;运行结束
-22445 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-39e9d1a14cf544c29794e300ac9cbb91] DEBUG  - worker:39e9d1a14cf544c29794e300ac9cbb91执行完成
-22446 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-39e9d1a14cf544c29794e300ac9cbb91] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-39e9d1a14cf544c29794e300ac9cbb91&gt;运行结束
-22446 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-ef68753086374341b80acc66c1b6877a] DEBUG  - worker:ef68753086374341b80acc66c1b6877a执行完成
-22446 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-ef68753086374341b80acc66c1b6877a] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-ef68753086374341b80acc66c1b6877a&gt;运行结束
-22462 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-08d17dd9b7a64eeeaf0a541836a44500] DEBUG  - worker:08d17dd9b7a64eeeaf0a541836a44500执行完成
-22463 [id:0a0dc7334de245109f17eafe064ef54a,type:pi-08d17dd9b7a64eeeaf0a541836a44500] DEBUG  - 线程&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi-08d17dd9b7a64eeeaf0a541836a44500&gt;运行结束
-22463 [RMI TCP Connection(1)-192.168.211.1] DEBUG  - 线程组&lt;id:0a0dc7334de245109f17eafe064ef54a,type:pi&gt;运行结束, 用时:22094ms
pi:3.1415926793432933
-22464 [main] DEBUG  - 开始注销对象:Worker|pi|08d17dd9b7a64eeeaf0a541836a44500
-22464 [main] DEBUG  - 结束注销对象:Worker|pi|08d17dd9b7a64eeeaf0a541836a44500
-22464 [main] DEBUG  - 开始注销对象:Worker|pi|11ea430b537f4721a5a4a61b3b887cca
-22464 [main] DEBUG  - 结束注销对象:Worker|pi|11ea430b537f4721a5a4a61b3b887cca
-22464 [main] DEBUG  - 开始注销对象:Worker|pi|35b8df60692d455a96a4dc6dc855fef7
-22464 [main] DEBUG  - 结束注销对象:Worker|pi|35b8df60692d455a96a4dc6dc855fef7
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|348e96c03b434158bd0ef026d33b35fb
-22465 [main] DEBUG  - 结束注销对象:Worker|pi|348e96c03b434158bd0ef026d33b35fb
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|dd9d0c0b47dd4e18bbf31d7778e3fac1
-22465 [main] DEBUG  - 结束注销对象:Worker|pi|dd9d0c0b47dd4e18bbf31d7778e3fac1
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|ef68753086374341b80acc66c1b6877a
-22465 [main] DEBUG  - 结束注销对象:Worker|pi|ef68753086374341b80acc66c1b6877a
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|39e9d1a14cf544c29794e300ac9cbb91
-22465 [main] DEBUG  - 结束注销对象:Worker|pi|39e9d1a14cf544c29794e300ac9cbb91
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|c766db4f2ecd49df807458cb010c9fb8
-22465 [main] DEBUG  - 结束注销对象:Worker|pi|c766db4f2ecd49df807458cb010c9fb8
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|2240ed47fc9d4bf1a8029920b2cd4edd
-22465 [main] DEBUG  - 结束注销对象:Worker|pi|2240ed47fc9d4bf1a8029920b2cd4edd
-22465 [main] DEBUG  - 开始注销对象:Worker|pi|3c29555265304dff8e7500e6d2ff444e
-22466 [main] DEBUG  - 结束注销对象:Worker|pi|3c29555265304dff8e7500e6d2ff444e
-22466 [main] DEBUG  - 开始注销对象:Foreman|pi|fdf013969d33499ca5f5213149fc2134
-22466 [main] DEBUG  - 结束注销对象:Foreman|pi|fdf013969d33499ca5f5213149fc2134
-22466 [main] DEBUG  - 开始注销对象:WorkQueue
-22466 [main] DEBUG  - 结束注销对象:WorkQueue
-25287 [Thread-2] DEBUG  - 检测已注册对象的可用性完成</pre>可以看到中间的计算结果是：<pre class="brush:xml; toolbar: true; auto-links: false;">pi:3.1415926793432933</pre><span id="OSC_h1_17"></span><h1>总结</h1><p>上面可以看到Tiny并行计算框架的总体设计思路及一个典型示例的计算。</p><p>也可以看<a href="http://my.oschina.net/tinyframework/blog/196486" target="_blank" rel="nofollow">复杂示例</a>。</p><p>也可以查看<a href="http://my.oschina.net/tinyframework/blog/196070" target="_blank" rel="nofollow">使用介绍</a></p><p><span></span></p><p>框架本身封装了大部分的代码工作，程序员只需要编写自己的工人及任务分解合并器就可以完成分布式计算。</p><p><strong><span style="color:#E53333;">下面是Tiny并行计算框架的代码统计情况，如你所见，总共只有1150行，去掉120个import只有1030行代码。</span></strong></p><p>不管你是Java老手还是Java新手，保证通俗易懂，马上掌握。</p><p>当然，关注这部分的同学，也可以观看、对比一下本期<a href="http://www.csdn.net/article/2013-10-14/2817171-Fourinone-Framework-Hadoop" target="_blank" rel="nofollow">开源专访</a>&amp;nbsp;彭渊大师<span>的分布式开源框架：<span></span><a href="https://code.google.com/p/fourinone/" target="_blank" rel="nofollow">fourinone</a></span></p><p><img src="http://static.oschina.net/uploads/space/2014/0327/210913_1m7s_1245989.jpg" alt=""></img></p><p><br></br></p></div>]]#