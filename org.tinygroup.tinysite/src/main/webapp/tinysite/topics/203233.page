#pageTitle("topic" "topic")
#title("Tiny乱弹" "悠然乱弹：从几个方法的重构讲开去--文件相关的处理 ")
#[[<div class="BlogContent"><p><a href="http://my.oschina.net/tinyframework/blog/203222" target="_blank" rel="nofollow">上一篇</a>，我们写了引言，说明了几个方法之前有比较坏的味道，也分析了存在一些性能和扩展性方面的问题。</p><p>但是如何进行优化解决呢？？</p><p>简单看看吧，确实没有什么好的解决方案，那我们就抽丝剥茧，看看这三个方法里都涉及到哪些个领域？</p><ol><li><span style="line-height:1.5;font-size:12.5px;">涉及到注解方面的处理</span></li><li><span style="line-height:1.5;font-size:12.5px;">涉及到多种注解方面的处理</span></li><li><span style="line-height:1.5;font-size:12.5px;">涉及到文件查找方面的问题</span></li><li>涉及到多种资源文件查找方面的问题-file,jar</li><li>涉及到对查找到资源<span></span>文件之后的后续处理的问题</li></ol><p>好吧，可能还有别的问题，我们先利用上面分析出来的问题，看看有没有着手之处？？</p><p>仔细分析下来，暂时有三种要遍历的文件了，file,jar,自定义ClassLoader，那我们简单抽象一下：</p><pre class="brush:java; toolbar: true; auto-links: false;">public interface FileObject{
     String getFileName();<span></span>&amp;nbsp; &amp;nbsp; &amp;nbsp;
     String getFileExtName();
     List&lt;FileObject&gt; getSubFileObject();
     void foreach( FileObjectFilter fileObjectFilter,FileObjectProcessor fileObjectProcessor);
     ...
}
然后构建
三个实现类：
public class FileObjectImpl implements FileObject{
...
}
public class JarFileObjectImpl implements FileObject{
...
}
public class ClassLoaderFileObjectImpl implements FileObject{
...
}</pre><p><span></span></p>这样一来就把不同的文件类型分解了。<p>在后续的处理中，就只要写：</p><pre class="brush:java; toolbar: true; auto-links: false;">for(FileObject fileObject:fileObjects){
...
}</pre>而不用再写烦人的if(protocal.equals(&quot;file&quot;)，<span>if(protocal.equals(&quot;jar&quot;)等等了，关键是后面不管再来多少种类型，咱的处理逻辑也不用再进行调整了。</span><p><span>接下来呢，肯定要进行文件的查找与处理，咋办呢？？抄，在JDK中有个FileFilter，咱给他来个FileObjectFileter不就解了？？</span></p><p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public interface FileObjectFilter {
    public boolean accept(FileObject fileObject);
}</pre>那后续还要处理呢？再来个FileObjectProcessor<p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public interface FileObjectProcessor {
    void process(FileObject fileObject);
}</pre>那不是还要递归做循环找文件么？写个递归处理方法：<p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public void foreach(FileObjectFilter fileObjectFilter,
                               FileObjectProcessor fileObjectProcessor) {
        if (fileObjectFilter.accept(this)) {
            fileObjectProcessor.process(this);
        }
            for (FileObject subFileObject : getChildren()) {
                foreach(subFileObject, fileObjectFilter, fileObjectProcessor, parentFirst);
            }<span></span>}</pre>那咱要找个所有的class文件，怎么找呢？？先写个文件扩展名过滤器<p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">public class FileExtNameFileObjectFilter implements FileObjectFilter {
    String fileExtName;
    public FileExtNameFileObjectFilter(String fileExtName) {
        this.fileExtName = fileExtName;
    }
    public boolean accept(FileObject fileObject) {
        String extName = fileObject.getExtName();
        if (extName != null) {
                return extName.equals(fileExtName);
        }
        return false;
    }
}</pre>接下来就如此这般了：<p><span></span></p><pre class="brush:java; toolbar: true; auto-links: false;">fileObject.foreach(new FileExtNameFileObjectFilter(&quot;class&quot;),new FileObjectProcessor() {
    public void process(FileObject fileObject) {
        System.out.println(fileObject.getPath());
    }
});</pre><p>OK，到此为止，各种文件的支持与遍历，过滤处理已经有比较好的解决方案了。</p><p>代码写起来很容易，扩展起来也很方便。可以满意了。</p><p>那么上面的代码可以处理为：</p><pre class="brush:java; toolbar: true; auto-links: false;">fileObject.foreach(new AnnotationFileObjectFilter(Abc.class),new FileObjectProcessor() {
    public void process(FileObject fileObject) {
        Class clazz=Class.forName(fileObject.getFileName);
        //做处理处理的一些事情
    }
});

fileObject.foreach(new AnnotationFileObjectFilter(Def.class),new FileObjectProcessor() {
    public void process(FileObject fileObject) {
        Class clazz=Class.forName(fileObject.getFileName);
        //做处理处理的一些事情
    }
});
...</pre>在文件处理方面比原来的形式好多了，但是上面提到的性能问题还是存在的。<p>胖子不是一口吃成的，罗马不是一天到达的，这篇先到这儿，<a href="http://my.oschina.net/tinyframework/blog/203248" target="_blank" rel="nofollow">下篇</a>再看注解相关的处理。</p></div>]]#